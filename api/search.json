[{"id":"3e57391cf8ec803a3edd2345ea3b8a8d","title":"NASA-08","content":"","slug":"NASA-08","date":"2024-04-17T09:25:06.000Z","categories_index":"","tags_index":"","author_index":"G36maid"},{"id":"c4e1f60384c045973f26fbdfef5bce29","title":"GDSC_HEXO","content":"GDSC Hexo1. 配置 Hexo步驟 1：安裝 Node.js 和 Git確保你的電腦上已經安裝了 Node.js 和 Git。你可以在它們的官方網站上下載並安裝。\n1sudo apt-get install git-core\n12curl -sL https://deb.nodesource.com/setup_14.x | sudo bash -sudo apt install -y nodejs\n步驟 2：安裝 Hexo在命令行中執行以下命令安裝 Hexo：\n1npm install -g hexo-cli\n\n步驟 3：創建一個新的 Hexo 網站在命令行中執行以下命令創建一個新的 Hexo 網站：\n123hexo init myblogcd myblognpm install\n\n步驟 4：啟動本地服務器執行以下命令以在本地啟動 Hexo 服務器：\n1hexo server\n\n現在你可以在瀏覽器中打開 http://localhost:4000 查看你的網站。\n2. Markdown 編寫Hexo 使用 Markdown 來撰寫文章。在 source/_posts 目錄中，你可以找到示例文章 hello-world.md。使用 Markdown 語法編寫你的文章。當然，我可以提供一個更詳細的 Markdown 編寫教學，特別針對從未使用過 Markdown 的學生。讓我們來深入了解 Markdown 的基礎知識：\nMarkdown 是什麼？Markdown 是一種輕量級的標記語言，用於編寫格式化的文本，以便於轉換為HTML等其他格式。它通常用於撰寫網頁內容、Readme 文件、網誌文章等。\n基本語法標題在 Markdown 中，你可以使用 # 來標記標題，# 的數量代表標題的級別，例如：\n123# 一級標題## 二級標題### 三級標題\n\n文字格式你可以使用下列方式來調整文字的格式：\n\n粗體: 使用 ** 或 __ 包圍文字來顯示粗體，例如：**這是粗體文字**。\n斜體: 使用 * 或 _ 包圍文字來顯示斜體，例如：*這是斜體文字*。\n刪除線: 使用 ~~ 包圍文字來顯示刪除線，例如：~~這是刪除線文字~~。\n\n列表Markdown 支持有序列表和無序列表：\n\n無序列表 使用 -、+ 或 * 作為項目標記，例如：\n123- 項目1- 項目2- 項目3\n\n有序列表 使用數字加上英文句點作為項目標記，例如：\n1231. 第一項2. 第二項3. 第三項\n\n鏈接和圖片你可以使用 [顯示文字](連結) 來添加超鏈接，例如：[OpenAI](https://openai.com)。\n要添加圖片，使用 ![圖片描述](圖片連結)，例如：![OpenAI Logo](https://openai.com/assets/logo-d5c8e8d92bca0b3ad88b6ce56167b88f1fc66b1765700722ff0b20a08d0d1ee0.png)。\n引用使用 &gt; 來引用一段文字，例如：\n1&gt; 這是一段引用的文字。\n\n代碼塊使用 ` 來標記內嵌的代碼，例如： `console.log(‘Hello, World!’)`。\n如果要顯示多行代碼，可以使用三個反引號 (`) 包圍代碼塊，並指定代碼的語言，例如：\n12345```javascriptfunction greet() &#123;  console.log(&#x27;Hello, World!&#x27;);&#125;```\n\n這些只是 Markdown 的基礎知識，你可以透過練習和閱讀更多的資源來掌握更多的功能和技巧。現在你可以嘗試在 Hexo 網站中創建一些文章，並使用 Markdown 來編寫它們。\n3. 配置到 GitHub Pages回到 hexo 資料夾，在終端機輸入下列指令安裝部署所需套件：\n1$ npm install hexo-deployer-git --save\n\n步驟 1：創建 GitHub Repository在 GitHub 上創建一個新的 Repository，Repository 名稱應該是 &lt;你的GitHub用户名&gt;.github.io。例如，如果你的 GitHub 用戶名是 example，那麼 Repository 名稱就應該是 example.github.io。\n步驟 2：修改 Hexo 配置文件打開 _config.yml 文件，找到 deploy 部分，並將其配置如下：\n1234deploy:  type: git  repository: git@github.com:yourusername/yourusername.github.io.git  branch: master\n\n請將 yourusername 替換為你的 GitHub 用戶名。\n步驟 3：部署到 GitHub Pages執行以下命令將你的網站部署到 GitHub Pages：\n12hexo cleanhexo deploy\n\n等待部署完成後，你的網站就可以在 https://yourusername.github.io 上訪問了。\n這樣，你就完成了一個簡單的 Hexo 個人網誌的建立、Markdown 編寫和部署到 GitHub Pages 的教學。希望這對你有所幫助！\n","slug":"GDSC-HEXO","date":"2024-04-17T07:33:51.000Z","categories_index":"","tags_index":"GDSC","author_index":"G36maid"},{"id":"2e049f453db919b1392c4271f48a6a7b","title":"NASA","content":"NASA 作業彙整\nNASA 作業彙整\n\nHomeWork\n\nNASA HW0\nNASA HW2\nNASA HW3\nNASA HW 04\nNASA hw5\nNASA Hw06 OPNSense\nNASA HW 7 \n\nlab\n\nNASA lab5\nNASA LAB 6 DNS\nNASA 2024 OPNsense lab\nPartition lab 2024\n\n","slug":"NASA","date":"2024-04-17T07:33:14.000Z","categories_index":"","tags_index":"NASA","author_index":"G36maid"},{"id":"b85d5757ee760c9545036c9da4aece67","title":"416","content":"","slug":"0416","date":"2024-04-16T09:22:42.000Z","categories_index":"","tags_index":"blog","author_index":"G36maid"},{"id":"86bba9078bb2a8d84b34e024b0dacb9c","title":"415","content":"","slug":"0415","date":"2024-04-15T09:22:50.000Z","categories_index":"","tags_index":"blog","author_index":"G36maid"},{"id":"deaa5ef913f6da32735ac165556afe2e","title":"NASA-07","content":"NASA HW 7\n41173058h\n鍾詠傑\n\nrefroot name serverspDNS docpDNS githubpDNS wikipDNSdocssocker solsystemdbackendPowerDNS-AdminGeneral installation\nInstalling PowerDNS-Admin on Ubuntu or Debian based systems\n\n\n\n11 DNS\nDNS 是 Domain Name System 的縮寫，它是一種用於將人類可讀的域名轉換為電腦可理解的 IP 地址的分散式命名系統。當您在瀏覽器中輸入網址時，例如”www.example.com&quot;，瀏覽器需要知道該網址對應的伺服器的 IP 地址，以便建立連接。DNS 就像是互聯網的電話簿，它將域名映射到相應的 IP 地址，從而使網際網路上的設備能夠相互通信。\n\n\n\n\n2 DDNS\nDDNS 是 Dynamic Domain Name System 的縮寫，它是一種動態域名系統。與傳統的靜態 DNS 不同，DDNS 允許動態分配 IP 地址的設備（例如家庭路由器）在其 IP 地址更改時更新其對應的域名記錄。這對於家庭用戶或小型企業而言特別有用，因為它們通常使用的是動態 IP 地址，而不是靜態 IP 地址。透過使用 DDNS，這些設備可以始終使用相同的域名訪問，而不必擔心其 IP 地址變化導致連接問題。\n\n\n\n\n3 root name servers全球共有13台 root name servers\nroot name servers\n\n\n\n4 TXT records除了作為註解之外，TXT 記錄還有許多實際應用，其中之一是用於電子郵件驗證。例如，SPF（Sender Policy Framework）和 DKIM（DomainKeys Identified Mail）是兩種常見的電子郵件驗證機制，它們都使用 TXT 記錄來實現。\n以 SPF 為例，域名的管理者可以在其 DNS 設置中添加一個 TXT 記錄，該記錄包含一組允許發送電子郵件的郵件伺服器的 IP 地址。當接收者的郵件伺服器收到一封郵件時，它可以查詢發件人域名的 SPF 記錄，以驗證郵件是否來自已授權的郵件伺服器。這有助於減少垃圾郵件和偽造郵件的風險，提高電子郵件傳遞的可靠性和安全性。\n\n\n\n2結果&#96;根據您提供的查詢結果，從根名稱伺服器到 www.csie.ntu.edu.tw 的查詢路徑如下：\n\n根名稱伺服器：\n\nIP: a.root-servers.net.\nIP: b.root-servers.net.\nIP: c.root-servers.net.\nIP: d.root-servers.net.\nIP: e.root-servers.net.\nIP: f.root-servers.net.\nIP: g.root-servers.net.\nIP: h.root-servers.net.\nIP: i.root-servers.net.\nIP: j.root-servers.net.\nIP: k.root-servers.net.\nIP: l.root-servers.net.\nIP: m.root-servers.net.\n\n\n.tw 名稱伺服器：\n\ntw. NS a.dns.tw.\ntw. NS b.dns.tw.\ntw. NS c.dns.tw.\ntw. NS d.dns.tw.\ntw. NS e.dns.tw.\ntw. NS f.dns.tw.\ntw. NS g.dns.tw.\ntw. NS h.dns.tw.\ntw. NS anytld.apnic.net.\n\n\nntu.edu.tw 名稱伺服器：\n\nntu.edu.tw. NS dns.ntu.edu.tw.\nntu.edu.tw. NS ntu3.ntu.edu.tw.\nntu.edu.tw. NS dns.tp1rc.edu.tw.\n\n\ncsie.ntu.edu.tw 名稱伺服器：\n\ncsie.ntu.edu.tw. NS csman2.csie.ntu.edu.tw.\ncsie.ntu.edu.tw. NS ntuns.ntu.edu.tw.\ncsie.ntu.edu.tw. NS csman.csie.ntu.edu.tw.\n\n\nwww.csie.ntu.edu.tw 的 IP 地址：\n\nwww.csie.ntu.edu.tw. A 140.112.30.26\n\n\n\n\n\nresult123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354miku@DESKTOP-HLSSCVT:~$ dig +trace www.csie.ntu.edu.tw; &lt;&lt;&gt;&gt; DiG 9.18.18-0ubuntu0.22.04.2-Ubuntu &lt;&lt;&gt;&gt; +trace www.csie.ntu.edu.tw;; global options: +cmd.                       87203   IN      NS      a.root-servers.net..                       87203   IN      NS      b.root-servers.net..                       87203   IN      NS      c.root-servers.net..                       87203   IN      NS      d.root-servers.net..                       87203   IN      NS      e.root-servers.net..                       87203   IN      NS      f.root-servers.net..                       87203   IN      NS      g.root-servers.net..                       87203   IN      NS      h.root-servers.net..                       87203   IN      NS      i.root-servers.net..                       87203   IN      NS      j.root-servers.net..                       87203   IN      NS      k.root-servers.net..                       87203   IN      NS      l.root-servers.net..                       87203   IN      NS      m.root-servers.net..                       87203   IN      RRSIG   NS 8 0 518400 20240420050000 20240407040000 5613 . ZhXQ/7ijGbesnEykk6GlTV0uB5AVdgh1yenLcuLCSaBTGw8YgfWWb7i3 hoQiRZICY+++iUQIE2/ELR/ykCYjGD5HwxS0lqfbUZvaY0IcKQ5lsAk3 OQlSEtmpQ+3158l9j5mjiTtb13L7QeJOr+cmJn4Auj+7IWei2irkQdu9 72VOAitFOv/MOin/1LTxAqQvQsK4TRUoQOBSAyJSQIfEqRZI3XhsXbTO itYMIl/MNFYmxGcmEZEAVlzLAHf9EM6yEKCdjQtjdiolzrGXoroBIGEp msbdt1yzs+DcfdJLKGfZujPhvVvwVBEvhfnBZlDLdljcG0pVUcMuMxsz ubJELw==;; Received 525 bytes from 172.31.224.1#53(172.31.224.1) in 860 mstw.                     172800  IN      NS      a.dns.tw.tw.                     172800  IN      NS      b.dns.tw.tw.                     172800  IN      NS      c.dns.tw.tw.                     172800  IN      NS      d.dns.tw.tw.                     172800  IN      NS      e.dns.tw.tw.                     172800  IN      NS      f.dns.tw.tw.                     172800  IN      NS      g.dns.tw.tw.                     172800  IN      NS      h.dns.tw.tw.                     172800  IN      NS      anytld.apnic.net.tw.                     86400   IN      DS      51277 8 2 462DA9AF501D2B1EEF6725522DB5972F8CD2490B51D92088FF1E3D2D E0EC7BCDtw.                     86400   IN      RRSIG   DS 8 1 86400 20240420050000 20240407040000 5613 . bB0xNjHOe6pkV/9LpEW/DzuMHtwozTlszTNaFPkO7LRu1WbbEt/+ox7D y+xgud3mLTsva5R7p44ckvH9m14DigO7G2y4TqmwrpfL1AU5rwjkNmbz hCqQcxd3GpXyaCny9TLY0UGeTluKm1/5yt579/QgtKNQ3cwKxdLb43+6 4fP/6YknTbOOqpjToP8RqwSQVSIe1HAChTd3Hb2SSaWopcR+ysH/Jpg6 heJ9fiz8oFUjR52nW0V+Zh/a7zF8PKkkpYRbxha1Qncb3dOu5YqAYmWn s91cFW26MZSvyB1Levy7w1RQjeHC3yKQ4UT7cBqWRMyrKs2knQma0In1 TOtPXw==;; Received 885 bytes from 170.247.170.2#53(b.root-servers.net) in 230 msntu.edu.tw.             300     IN      NS      dns.ntu.edu.tw.ntu.edu.tw.             300     IN      NS      ntu3.ntu.edu.tw.ntu.edu.tw.             300     IN      NS      dns.tp1rc.edu.tw.CFHNKGNQ5QOBIB61FV5AKT0CR5554JKT.edu.tw. 300 IN NSEC3 1 0 10 5B7A95B3E7E6DD0C CFN2AMOOKK0JTMIHE976IRUQPHJJED5N NSCFHNKGNQ5QOBIB61FV5AKT0CR5554JKT.edu.tw. 300 IN RRSIG NSEC3 8 3 300 20240410171756 20240406161756 33219 edu.tw. TcC+thTOZPE+dV/7ttpVsuoSm26If2WrHrDiOVGAx8zhzQtG0TcrZjvi /XQtplFhkF4BAAxXNIZFoYofNuBCi6O76qUqUo69z0t9maHhCk71AjUa TPoISDUfXnTIXLXhsaqvSdYU5x1g5J0IrTKvYOLFYjO5jqqpOy2uk7uI pGY=;; Received 433 bytes from 182.173.0.10#53(f.dns.tw) in 0 ms;; UDP setup with 2001:288:1001:254::4#53(2001:288:1001:254::4) for www.csie.ntu.edu.tw failed: network unreachable.;; UDP setup with 2001:288:1001:254::4#53(2001:288:1001:254::4) for www.csie.ntu.edu.tw failed: network unreachable.;; UDP setup with 2001:288:1001:254::4#53(2001:288:1001:254::4) for www.csie.ntu.edu.tw failed: network unreachable.csie.ntu.edu.tw.        14400   IN      NS      csman2.csie.ntu.edu.tw.csie.ntu.edu.tw.        14400   IN      NS      csman.csie.ntu.edu.tw.;; Received 121 bytes from 163.28.16.10#53(dns.tp1rc.edu.tw) in 0 mswww.csie.ntu.edu.tw.    600     IN      A       140.112.30.26www.csie.ntu.edu.tw.    600     IN      RRSIG   A 7 5 600 20240426061133 20240327061133 39023 csie.ntu.edu.tw. I1oK7sS1MyUuQR5ofE6D1fkaFzCnpVV74XD9VkrDyfojMSIajCtoyRUH n9kmRe+hcRpmkDgAcEHtZAAeXzSkPbDgeTaoFKRbWLH2+1i2Ly2Is9vp d06qvt1HE8j1C9ibon9eiGAVIs7uhpImaF2fL30nJKdb01QW4dGhvMic ALAZUJOGPKxZSmCYYe99eCPNIiuSrDs+He7lAdJKgKq9FFAk+Ed3Hsew 8Jo2PRk2eMBalyn8umjD+NXi4tKODWgAjGR2kYbgM5huHTLfmKNUW4yK w/b6wKq8To4VlucLtt6+cvRv9fXHsMxQQu+/9XETAIkv0uwojLEL3E1E 4PCQwQ==csie.ntu.edu.tw.        600     IN      NS      csman2.csie.ntu.edu.tw.csie.ntu.edu.tw.        600     IN      NS      ntuns.ntu.edu.tw.csie.ntu.edu.tw.        600     IN      NS      csman.csie.ntu.edu.tw.csie.ntu.edu.tw.        600     IN      RRSIG   NS 7 4 600 20240426061133 20240327061133 39023 csie.ntu.edu.tw. PBQqIiK0YOTtYKKjTRmiVgTi4a2gjcByg/hHpob8S2xrzwsBvc8bnndu ofN3YqQ2xjre7SbLCpvb83tPIkypf4lPYILdSEa8Js67jbzFaEl6Zkqf YMqJ9MhcTh2VjckVyMCLBJUha7qBkuxEdUqjyENTyDYezQm9hVvCGjNj tyLDIU6Qp59Ozq55BgnctoCz0sYB8ZqKq9Yva2vEm0lPL659VkAbLz7q F61+qZ3a5xjVpG+xNh8p8w5GaaJY5F69zAzidK4d1fVUOrGf4VB/QEFY cpSSigWPDbhNWOfD/3uzCTspBRU/f3Cwj1X6W76+0oBodButbWbtX+6r uJUENQ==;; Received 1066 bytes from 140.112.30.13#53(csman.csie.ntu.edu.tw) in 0 ms\n\n\n\n截圖\n\n\n\n3設計 NTU CSIE 的 *.csie.ntu.edu.tw 網域的 DNS 架構需要考慮高可用性、安全性和可擴展性等因素。以下是一些設計方向：\n1 設計方向\n多台伺服器的分散式架構：\n\n使用多台伺服器來分散 DNS 查詢負載，並實現冗餘和備援。\n這些伺服器可以部署在不同的地理位置，以提高系統的可用性和容錯能力。\n配置主要和次要 DNS 伺服器，以便在其中一台伺服器失效時自動切換到另一台。\n\n\n自動化備份和恢復機制：\n\n定期備份 DNS 記錄和設定，並將其存儲在安全的地方。\n實施自動化恢復機制，以在伺服器上的 DNS 記錄丟失或損壞時能夠快速恢復。\n\n\n實驗室子域名的管理：\n\n提供一個管理界面或工具，使實驗室能夠請求並管理自己的子域名。\n實現自動化程序來處理這些請求，以確保有效且及時的管理。\n\n\n防禦 DNS 攻擊：\n\n實施流量監控和流量限制措施，以應對 DNS flooding 攻擊。\n配置防火牆和入侵檢測系統來檢測和阻止 DNS amplification 攻擊。\n使用安全的軟體和硬體來防止 DNS 竄改攻擊，如 DNSSEC 和適當的加密。\n\n\n監控和日誌：\n\n實施監控系統來監視 DNS 伺服器的運行狀態和性能。\n定期審查 DNS 日誌以檢測任何異常活動或潛在的攻擊。\n\n\n\n\n\n\n2 危機應對\n如果今天其中一台伺服器壞掉了怎麼辦？\n\n上述方案中使用了多台伺服器的分散式架構。這意味著即使其中一台伺服器壞掉，其他伺服器仍然可以處理 DNS 查詢，從而保持服務的可用性。\n\n\n如果今天系館停電導致所有機房下線怎麼辦？\n\n配置主要和次要 DNS 伺服器，這些伺服器可以位於不同的地理位置，例如不同的系館。這樣即使某個機房停電，其他機房的 DNS 伺服器仍然可以繼續提供服務。\n\n\n如果因為某些原因導致伺服器上的 DNS records 不見了怎麼辦？\n\n實施自動化備份和恢復機制，定期備份 DNS 記錄和設定。即使某些記錄不見了，也可以快速恢復到先前的狀態。\n\n\n有些實驗室想要擁有自己的 subdomain，該如何實現？\n\n提供一個管理界面或工具，使實驗室能夠請求並管理自己的子域名。並實現自動化程序來處理這些請求，以確保有效且及時的管理。\n\n\n如何應對 DNS flooding attack？\n\n實施流量監控和流量限制措施，這些措施可以檢測和阻止異常的 DNS 查詢流量，防止 DNS 伺服器被淹沒。\n\n\n如何應對 DNS amplification attack？\n\n配置防火牆和入侵檢測系統來檢測和阻止 DNS amplification 攻擊。並且定期更新軟體和硬體，以確保它們能夠有效地防止這類攻擊。\n\n\n如何確保對 .csie.ntu.edu.tw 的 query response 不會被攻擊者竄改成 malicious ip 呢？*\n\n使用安全的軟體和硬體來防止 DNS 竄改攻擊，如 DNSSEC 和適當的加密。這些措施可以確保 DNS 回應的完整性，並防止攻擊者竄改 DNS 記錄。\n\n\n\n\n\n\n4.pDNS docpDNS githubpDNS wikipDNSdocs設定 SQLite3 後端\n12sudo apt-get updatesudo apt-get install pdns-server pdns-backend-sqlite3\n編輯pdns.conf文件新增以下內容\n123sudo vim /etc/powerdns/pdns.conflaunch=gsqlite3gsqlite3-database=/var/lib/powerdns/pdns.sqlite3\n建立資料庫:\n123sudo mkdir /var/lib/powerdnssudo sqlite3 /var/lib/powerdns/pdns.sqlite3 &lt; /usr/share/doc/pdns-backend-sqlite3/schema.sqlite3.sqlsudo chown -R pdns:pdns /var/lib/powerdns\n123sudo systemctl start pdnsorsudo systemctl restart pdns\n檢查\n1systemctl status pdns\n\n\n\n測試123456789$ sudo -u pdns pdnsutil create-zone example.com ns1.example.comCreating empty zone &#x27;example.com&#x27;Also adding one NS record$ sudo -u pdns pdnsutil add-record example.com &#x27;&#x27; MX &#x27;25 mail.example.com&#x27;New rrset:example.com. 3005 IN MX 25 mail.example.com$ sudo -u pdns pdnsutil add-record example.com. www A 192.0.2.1New rrset:www.example.com. 3005 IN A 192.0.2.1\n如果我們現在重新查詢資料庫， www.example.com\n12345$ dig +short www.example.com @127.0.0.1192.0.2.1$ dig +short example.com MX @127.0.0.125 mail.example.com\n\n如果失敗請看安裝問題\n\n\n安裝問題問題1:binding to UDP socket: Address already in use\n解決1:socket solutionor\n12sudo vim /etc/powerdns/pdns.conflocal-port=5300\n\n\n\n問題2:system has not been booted with systemd as init system pid 1 . can’t operate.\n解決2:強制執行(前台)\n12cd /usr/sbin./pdns_server --daemon=no --guardian=no --loglevel=9\norsystemd\n\n\n後端設定:backend\n\n\n\npowerDNS adminPowerDNS-Admin\n我這邊選擇直接在local安裝，不使用Docker按照wiki操作:General installationInstalling PowerDNS-Admin on Ubuntu or Debian based systems\n首先設定資料庫(sqlite3跳過)Database Setup\n\n\n建立PowerDNS API 設定PowerDNS API doc\n編輯pdns.conf文件新增以下內容\n1234api=yesapi-key=changeme# Needed before 4.1.0webserver=yes\n重新啟動 pdns_server 後，測試以下內容\n123456789101112131415161718192021222324252627# List zonescurl -H &#x27;X-API-Key: changeme&#x27; http://127.0.0.1:8081/api/v1/servers/localhost/zones | jq .# Create new zone &quot;example.org&quot; with nameservers ns1.example.org, ns2.example.orgcurl -X POST --data &#x27;&#123;&quot;name&quot;:&quot;example.org.&quot;, &quot;kind&quot;: &quot;Native&quot;, &quot;masters&quot;: [], &quot;nameservers&quot;: [&quot;ns1.example.org.&quot;, &quot;ns2.example.org.&quot;]&#125;&#x27; -v -H &#x27;X-API-Key: changeme&#x27; http://127.0.0.1:8081/api/v1/servers/localhost/zones | jq .# Show the new zonecurl -H &#x27;X-API-Key: changeme&#x27; http://127.0.0.1:8081/api/v1/servers/localhost/zones/example.org. | jq .# Add a new record to the new zone (would replace any existing test.example.org/A records)curl -X PATCH --data &#x27;&#123;&quot;rrsets&quot;: [ &#123;&quot;name&quot;: &quot;test.example.org.&quot;, &quot;type&quot;: &quot;A&quot;, &quot;ttl&quot;: 86400, &quot;changetype&quot;: &quot;REPLACE&quot;, &quot;records&quot;: [ &#123;&quot;content&quot;: &quot;192.0.5.4&quot;, &quot;disabled&quot;: false &#125; ] &#125; ] &#125;&#x27; -H &#x27;X-API-Key: changeme&#x27; http://127.0.0.1:8081/api/v1/servers/localhost/zones/example.org. | jq .# Combined replacement of multiple RRsetscurl -X PATCH --data &#x27;&#123;&quot;rrsets&quot;: [  &#123;&quot;name&quot;: &quot;test1.example.org.&quot;,   &quot;type&quot;: &quot;A&quot;,   &quot;ttl&quot;: 86400,   &quot;changetype&quot;: &quot;REPLACE&quot;,   &quot;records&quot;: [ &#123;&quot;content&quot;: &quot;192.0.2.5&quot;, &quot;disabled&quot;: false&#125; ]  &#125;,  &#123;&quot;name&quot;: &quot;test2.example.org.&quot;,   &quot;type&quot;: &quot;AAAA&quot;,   &quot;ttl&quot;: 86400,   &quot;changetype&quot;: &quot;REPLACE&quot;,   &quot;records&quot;: [ &#123;&quot;content&quot;: &quot;2001:db8::6&quot;, &quot;disabled&quot;: false&#125; ]  &#125;  ] &#125;&#x27; -H &#x27;X-API-Key: changeme&#x27; http://127.0.0.1:8081/api/v1/servers/localhost/zones/example.org. | jq .\n截圖應該要印出一些json內容有印出就是api正常運作\n\n\n安裝 PowerDNS Admin 所需套件1sudo apt install -y python3-dev git libsasl2-dev libldap2-dev python3-venv libmariadb-dev pkg-config build-essential curl libpq-dev\n\n安裝 NodeJs12curl -sL https://deb.nodesource.com/setup_14.x | sudo bash -sudo apt install -y nodejs\n\n安裝 yarn 來配置資源文件123curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | gpg --dearmor | sudo tee /usr/share/keyrings/yarnkey.gpg &gt;/dev/nullecho &quot;deb [signed-by=/usr/share/keyrings/yarnkey.gpg] https://dl.yarnpkg.com/debian stable main&quot; | sudo tee /etc/apt/sources.list.d/yarn.listsudo apt update &amp;&amp; sudo apt install -y yarn\nFor older Debian systems:\n1234sudo curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -echo &quot;deb https://dl.yarnpkg.com/debian/ stable main&quot; | sudo tee /etc/apt/sources.list.d/yarn.listsudo apt update -ysudo apt install -y yarn\n\n\n\n建立 virtualenv 虛擬環境Note: Please adjust /opt/web/powerdns-admin to your local web application directory\n123git clone https://github.com/PowerDNS-Admin/PowerDNS-Admin.git /opt/web/powerdns-admincd /opt/web/powerdns-adminpython3 -mvenv ./venv\n\n啟動您的 python3 環境並安裝 requirements.txt\n123source ./venv/bin/activatepip install --upgrade pippip install -r requirements.txt\n\n\n\n運行 PowerDNS-Admin建立 PowerDNS-Admin 設定檔並根據您的用例進行必要的變更。確保將 SECRET_KEY 變更為您自己產生的長隨機字串（請參閱 Flask 文件）Flask\n123cp /opt/web/powerdns-admin/configs/development.py /opt/web/powerdns-admin/configs/production.pyvim /opt/web/powerdns-admin/configs/production.pyexport FLASK_CONF=../configs/production.py\n\n進行資料庫遷移\n12export FLASK_APP=powerdnsadmin/__init__.pyflask db upgrade\n\n產生必須文件\n12yarn install --pure-lockfileflask assets build\n\n現在您可以透過命令運行PowerDNS-Admin我這裡使用tmux掛在前台運行同時可以查看所有發生的變化\n1./run.py\n進入127.0.0.1:9191可以特別設定，但這是預設port\n\n建立帳號後登入即可\n\n連接API (pnds.conf裡面的)\n\n\n3. 透過 PowerDNS-Admin 新增 records。請根據以下故事新增 DNS records，並附上 dig 後的截圖功能1建立zone nasa.csie.twadd Record\n\n\n\nName\nType\nStatus\nTTL\nData\n\n\n\nverification\nTXT\nActive\n60\n“I LOVE NASA”\n\n\n\n\n\n功能2建立 Zone Records - sub.nasa.csie.tw\n\n\n\nName\nType\nStatus\nTTL\nData\n\n\n\n*\nNS\nActive\n60\nsubns.nasa.csie.tw.\n\n\n\n\n\n功能3建立 Zone Records - subns.nasa.csie.tw\n\n\n\nName\nType\nStatus\nTTL\nData\n\n\n\n@\nA\nActive\n60\n10.1.6.88\n\n\n\n\n\n","slug":"NASA-07","date":"2024-04-01T09:25:03.000Z","categories_index":"","tags_index":"NASA","author_index":"G36maid"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post1$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server1$ hexo server\n\nMore info: Server\nGenerate static files1$ hexo generate\n\nMore info: Generating\nDeploy to remote sites1$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2024-04-01T07:33:51.000Z","categories_index":"","tags_index":"start","author_index":"G36maid"},{"id":"c676bba4b03a11a9a2c7a205c7e8caf9","title":"NASA-06","content":"NASA Hw06 OPNSense41173058h鍾詠傑\nrefOPNsence防火牆manual\nopnsense-vs-pfsense\nlab6 mackmd\nOPNsence alias\nhping3\nreporting_traffic\nOPNSense Firewall Rules Explained (youtube)\n\n\nShort Answers (20%)1. (5%)在 OPNSense 防火牆 rule 的設定中，對封包的處置有 Block 跟 Reject 可以選擇。請說明兩者的差別，還有各自在什麼情況下較適合使用。\n在OPNsense防火牆中，”Block”和”Reject”都是用於處理封包的選項，它們有一些重要的差異：\n\nBlock（封鎖）：\n\n當防火牆接收到一個符合Block規則的封包時，它會將該封包丟棄，並不會向發送者發送任何回應。\nBlock通常用於阻止對來自不信任或有威脅的來源的封包的訪問，或者用於阻止某些通信端口的訪問，以確保不希望的流量無法進入網絡。\n\n\nReject（拒絕）：\n\n當防火牆接收到一個符合Reject規則的封包時，它會將該封包丟棄，並向發送者發送一個通知或拒絕訊息。這通常是一個ICMP錯誤訊息，告訴發送者封包被阻止。\nReject通常用於明確地告知發送者其封包已被阻止，這有助於節省網路資源，因為發送者在收到響應後通常會停止重試。\n\n\n\n適合使用的情況取決於您的安全需求和網路策略：\n\nBlock的適用情況：\n\n當您只需阻止特定封包進入網絡，而不希望通知發送者時，通常選擇Block。這可以讓攻擊者無法確定其攻擊是否成功，或是不存在該裝置或網域，增加了防禦的不可預測性。\n如果您對發送者的身份不太在意，只是想阻止封包，則使用Block。\n\n\nReject的適用情況：\n\n當您希望明確地告知發送者其封包已被阻止時，通常選擇Reject。這對於合法用戶來說是一個良好的回饋，可以幫助他們迅速意識到問題並採取適當的措施。\n如果您希望發送者能夠清楚地知道其封包未被接受，並且希望他們停止重試或者嘗試與您的系統進行通信，則使用Reject。\n\n\n\n\n\n2. (5%)在 OPNSense 防火牆 rule 的設定中，Source 跟 Destination 選擇“interface net”和“interface address”的差別是什麼?\nNET 會比對該子網路上的任何內容，且該位址僅符合指派給該子網路上 pfsense 的 IP 位址。\n\nInterface Net（介面網路）：\n\n使用”interface net”選項時，您將規則應用到整個介面的IP地址範圍。這意味著規則將適用於介面上的所有IP地址，包括子網中的所有主機。\n這對於需要規則應用於特定介面的所有主機或子網的情況非常有用。\n\n\nInterface Address（介面地址）：\n\n使用”interface address”選項時，您可以具體指定來源或目的地的IP地址。您可以輸入單個IP地址、CIDR表示的子網，或者甚至是一個地址範圍。\n這對於需要針對特定IP地址或特定IP地址範圍的情況非常有用，例如將規則應用於特定主機或一組主機。\n\n\n\n\n\n3. (5%)請說明什麼是“stateful firewall”以及“stateless firewall”。OPNSense 是屬於哪一種？Ref: OPNsence防火牆manual\n\nStateful Firewall（有狀態防火牆）：\n\n有狀態防火牆能夠追蹤封包的狀態和連接狀態。當一個封包通過防火牆時，防火牆會記錄下相關的連接資訊，例如源IP地址、目的IP地址、源端口、目的端口等。\n一旦建立了初始的連接狀態，防火牆將根據先前建立的連接資訊來允許或阻止後續的封包。這樣可以實現對單個連接的跟蹤和管理，提高了安全性和效率。\nStateful Firewall通常能夠檢測和防止一些攻擊，如基於連接的攻擊（如SYN洪水攻擊）和特定連接的不正常行為。\n\n\nStateless Firewall（無狀態防火牆）：\n\n無狀態防火牆僅僅根據單個封包的內容進行過濾和判斷，而不關心連接的狀態。每個封包被視為獨立的事件，沒有考慮先前的封包或連接。\nStateless Firewall通常更加簡單和輕量，因為它們不需要維護連接狀態表，並且通常更快速地處理封包。\n但是，無狀態防火牆無法提供與連接相關的安全功能，也無法對一些進階攻擊進行有效的防範。\n\n\n\nOPNsense，屬於有狀態防火牆。OPNsense使用狀態資訊來追蹤和管理封包的連接狀態，並根據先前建立的連接資訊來進行過濾和授權。\n\n\n4. (5%)目前系館防火牆是用 pfSense 架設。請簡單比較 pfSense 與 OPNSense 的差異，至少列舉兩樣？Ref: opnsense-vs-pfsense\npfSense 和 OPNsense 都是基於 FreeBSD 的開源防火牆&#x2F;路由器平台OpnSense 專注於安全性和使用者友善性，而 pfSense 則提供靈活性和廣泛的插件。這兩種解決方案都可以提供強大的防火牆保護並增強網路安全性。\n\npfSense 的用戶界面較為傳統，使用基於古老技術的WebGUI，功能上可能較為陽春，但已經穩定存在多年。\nOPNsense 的用戶界面則更現代化和易於使用，具有更多的定製功能和視覺效果。它的WebGUI更加直觀和功能豐富，並且提供了更多的操作選項。\npfSense 和 OPNsense 都擁有活躍的開發社區，但兩者的開發模式和社區參與有所不同。\npfSense 的開發主要由商業公司 Netgate 領導，其核心代碼不是完全開源的，並且一些高級功能需要付費許可證。\nOPNsense 的開發由一個開源社區主導，它強調透明度和開放性，所有功能都是完全開源的，並且在功能和安全方面積極進行發展和改進。\n\n\n\nOPNSense (80%)5. (10%)設定 10.5.0.0&#x2F;24, 10.8.0.0&#x2F;24, 10.99.0.0&#x2F;24 給 VLAN 5, VLAN 8, VLAN 99 三個網路介面。以下所有大題中，下列關係是等價的OPT 1&#x3D;VLAN 5OPT 2&#x3D;VLAN 8OPT 3&#x3D;VLAN 99\n請參考 lab 6 ，三台Client VM 與 OPNSense 作法完全如法炮製lab6 mackmd建立一台 FreeBsd64 並安裝 OPNSense建立三台 alpine linux 並進行安裝 openssh vlan各自建立 vlan 5, 8, 99\n\n\n\n6. (10%) 設定以下 alias:GOOGLE_DNS : 8.8.8.8, 8.8.4.4ADMIN_PORTS : 22, 80, 443CSIE_WORKSTATIONS : ws[1~5].csie.org\n額外設定(後面會用到) :PrivateRanges:10.[5,8,99].0.0&#x2F;24 + __lan_network\n\n\n\n7. (10%)打開 OPNSense 的 SSH 功能。設定只有 VLAN 99 的機器可以透過 ADMIN_PORTS 連到 OPNSense。VLAN 5 與 VLAN 8 皆不允許。\n進入 System: Settings: Administration:Secure Shell勾選以下所有\n\n Enable Secure Shell yes\n Permit root user login yes\n Permit password login\n SSH port 22\n Listen Interfaces OPT3 (vlan99)\n\n\n然後新增最上面的規則允許Vlan99往防火牆 ADMIN_PORTS 的 TCP 連線\n\n\n\n8. (10%) VLAN 99 的機器只能存取以下位址或機器：• Google_DNS• CSIE_WORKSTATIONS（請提供 traceroute CSIE_WORKSTATIONS 的截圖，若你是 windows 本機可以加參數 -I )• 這台 OPNSense（請提供 ssh 到 OPNSense management interface 的截圖）\n• Google_DNS 的解析規則(後四規則)請見下一題\n\n\n\n\n9. (10%)VLAN 5 的機器可以 ping 到 VLAN 8 的機器，反之則不行。\n先在vlan 5 vlan 8 vlan 99 建立以下四個規則\nPrivateRanges:10.[5,8,99].0.0&#x2F;24 + __lan_network\n目的寫在 Description綜合效果是所有vlan無法互相ping但是都能透過 DNS 解析到外網。PrivateRanges &#x3D; vlan5 + vlan8 + vlan99 + lan拒絕所有本服務內部的需求。如果是ping Firewall 的服務就用 ICMP 啟用，否則如果是DNS 請求就使用本地 GOOGLE_DNS 進行解析最後預設通過所有需求(最低優先)\n首先三台機器的DNS server 都做以下設定(這裡用OPT1舉例)DNS servers &#x3D; 8.8.8.8 , 8.8.4.4\n接下來分別設定VLAN5在 OPT1 的防⽕牆加上優先規則(打勾的)，允許將來⾃ OPT1 (VLAN5) 傳到 OPT2 (VLAN8) 通過\n部分規則與知識參考這部影片OPNSense Firewall Rules Explained (youtube)\n\n\n10. (10%)在 2024&#x2F;03&#x2F;14 整天，VLAN5 這個 interface 不能通過任何的封包。\n前往 Firewall: Settings: Schedules建立當天的時間規則March 14 - 15\t0:00-0:00\n\n然後特別 block Vlan5 (OPT1) 3&#x2F;14 號無法通過任何封包 IPv4+6\n\n\n\n11. (10%) 請使用 hping3 或其他指令，每秒分別發送 0.1 Mb, 1 Mb, 10 Mb, 50 Mb 給 OPNsenseserver，觀察 reporting&#x2F;traffic 中的 graph，試著分析圖形的變化。\n可以看到隨著資料量擴大，該 Vlan 5 (OPT1) 所傳輸的流量也越大。影片檔案 :https://drive.google.com/drive/folders/1GkiqopiF7e9u0OQT1L5tkvgh8B3EDinN?usp=sharing\n指令:\n1234hping3 -c 10 -d 100 -S 10.0.2.15hping3 -c 10 -d 1000 -S &lt;OPNsense_IP&gt;hping3 -c 10 -d 10000 -S &lt;OPNsense_IP&gt;hping3 -c 10 -d 50000 -S &lt;OPNsense_IP&gt;\n\n\n\n\n12. (10%)到 System &gt; Configurations &gt; Backups 中，下載 config.xml，將檔名依照你的學號改成如 b86506054.xml 的檔名，連同作業 PDF 一起繳交。\n","slug":"NASA-06","date":"2024-03-24T16:00:00.000Z","categories_index":"","tags_index":"NASA","author_index":"G36maid"},{"id":"c165b28ddb77cb95a6d1fb1bee49ab82","title":"NASA-05","content":"NASA hw5info學號: 41173058h學生: 鍾詠傑\nReferences\nLab 5Slides: \nhttps://docs.google.com/presentation/d/1MV_lMUDzkaDGnUFqYSm-p76lKQE4-ECJW5B_JE4_oww/edit#slide=id.g26ba0c57e7f_0_159\n\n\nMinikube Documentation: \nhttps://minikube.sigs.k8s.io/docs/start/\n\n\nUbuntu Console Configuration: \nhttps://blog.wataash.com/ubuntu_console/\n\n\nManage Docker as a Non-root User: \nhttps://docs.docker.com/engine/install/linux-postinstall/\n\n\nPort Forwarding: \nhttps://stackoverflow.com/questions/47173463/how-to-access-local-kubernetes-minikube-dashboard-remotely\n\n\nKubernetes Dashboard: \nhttps://ithelp.ithome.com.tw/m/articles/10195385\n\n\nKubernetes Tutorial: \nhttps://blog.techbridge.cc/2018/12/01/kubernetes101-introduction-tutorial/\n\n\nTranslate a Docker Compose File to Kubernetes Resources: \nhttps://kubernetes.io/docs/tasks/configure-pod-container/translate-compose-kubernetes/\n\n\nTunneling Tools: \nhttps://tailscale.com/\n\n\nHelm Introduction: \nhttps://ithelp.ithome.com.tw/articles/10238998\n\n\nHelm Chart Documentation: \nhttps://helm.sh/docs/\n\n\nHelm Chart for phpMyAdmin: \nhttps://artifacthub.io/packages/helm/bitnami/phpmyadmin\n\n\nHelm Chart for MySQL: \nhttps://artifacthub.io/packages/helm/bitnami/mysql\n\n\n\nExamples\nExample 1: \nhttps://github.com/rzrokon/Docker-NGINX-PHP-MySQL-PhpMyadmin/tree/master\n\n\nExample 2: \nhttps://github.com/nanoninja/docker-nginx-php-mysql\n\n\n\n\n\nVirsh1 安裝VM設定 ubuntu.qcow2\n1qemu-img create -f qcow2 -o cluster_size=2M ubuntu.qcow2 20G\n新增一個 Virtual Machine\n123456789101112virt-install \\--name=41173058h \\--vcpus=2 \\--memory=8192 \\--disk path=/tmp2/41173058h/nasahw5/ubuntu.qcow2,size=20 \\--cdrom=ubuntu.iso \\--os-variant=ubuntu20.04 \\--network=default \\--mac=52:54:00:17:30:58 \\--console pty,target_type=serial \\--graphics vnc,listen=0.0.0.0,password=0910  \\--noautoconsole\n暫時用vnc安裝linuxvirsh vncdisplay 41173058h\n安裝完成後記得回到 hostvirsh edit 41173058h刪除安裝介質區塊然後重新開機virsh start 41173058h\n\n\n圖片virsh list 的輸出畫面(右上)\nVM 內開機完成的畫面\nVM 內登入後的畫面\nVM 內執行 ip a 指令的輸出畫面\n失敗時刪除用指令\n12virsh shutdown 41173058hvirsh undefine 41173058h --remove-all-storage\n\n\n\n2 開啟 serial console 與 sshenable console serialhttps://blog.wataash.com/ubuntu_console/\n1sudo vim /etc/default/grub\n進行以下操作\n123456789101112131415## remove (optional):# GRUB_TIMEOUT_STYLE=hidden## change:# (optional)# GRUB_TIMEOUT=0GRUB_TIMEOUT=2## add:GRUB_TERMINAL=&quot;console serial&quot;GRUB_SERIAL_COMMAND=&quot;serial --speed=115200&quot;## change:# GRUB_CMDLINE_LINUX=&quot;&quot;GRUB_CMDLINE_LINUX=&quot;console=tty1 console=ttyS0,115200&quot;\n執行sudo update-grub後reboot回到工作站\n1virsh console 41173058h\n整台都是工作站，但是左下為console serial\nssh在安裝linux時就有安裝openssh 服務了但是要對VM進行端口轉發，將某個 port 的 ssh 需求導向VM\nhttps://serverfault.com/a/352598\n在工作站進行端口轉發\n12virsh qemu-monitor-command --hmp 41173058h &#x27;hostfwd_add ::3636-:22&#x27;ssh h41173058@ws2.csie.ntu.edu.tw -p 3636\n\n\n\ndocker3. Docker Set Up在安裝linux時就有安裝openssh 服務了在這裡避免每次 Docker 都要 sudoManage Docker as a non-root user\nhttps://docs.docker.com/engine/install/linux-postinstall/\n12345sudo groupadd dockersudo usermod -aG docker $USERnewgrp dockerdocker run hello-world\n如果未成功就reboot 即可生效\n截圖sudo docker version (左上)與 sudo dockercompose version (左下)\n\n\n\nDocker Basics4. 使用 Container 的時機：\n開發與測試環境的快速搭建和拆卸。\n微服務架構下的部署與擴展。\n持續集成&#x2F;持續交付 (CI&#x2F;CD) 流程中的自動化測試和部署。\n需要將應用程式與其相依性打包成獨立的單元。\n\n   使用 VM 而非 Container 的時機：\n\n需要完全隔離的環境，如安全性要求較高的應用程式。\n應用程式需要特定的作業系統環境，而非容器化的應用程式。\n需要運行不同作業系統的應用程式。\n\n\n\n5.在 Windows 和 macOS 上，container 的效能會比在 Linux 上差，主要原因是因為 Docker 在這些作業系統上需要透過額外的虛擬化層來執行，而這會增加一些額外的開銷，導致效能下降。例如，在 Windows 上，Docker Desktop 使用 Hyper-V 或 WSL 2 來執行 Linux container，而在 macOS 上，Docker Desktop 使用 HyperKit 虛擬機來執行 Linux container。這些額外的虛擬化層會增加系統資源的使用量，並可能導致效能下降。\n\n\n6.   (a) docker stop $(docker ps -aq)       - 此指令會停止所有正在運行的 container。docker ps -aq 用來列出所有 container 的 ID。\n   (b) docker rmi $(docker images -aq)       - 此指令會刪除所有的 image。docker images -aq 用來列出所有 image 的 ID。\n   (c) docker system prune -af       - 此指令會刪除所有未被使用的資源，包含 containers, networks, images 與 volume。\n   (d) docker inspect -f &#39;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#39; 5b0f1ed0dcb8       - 此指令會列出 container 的 IP。以提供的 Container ID 為例。\n   (e) docker stats --all --format &quot;table &#123;&#123;.Container&#125;&#125;\\t&#123;&#123;.CPUPerc&#125;&#125;\\t&#123;&#123;.MemUsage&#125;&#125;&quot;       - 此指令會即時查看當前所有 container 所使用的 CPU 與 Memory。\n\n   \n7. nginx123docker run -d -p 8763:80 --name nginx-1 nginx:1.24.0curl http://localhost:8763\n截圖成功的截圖(左上)\n\n\n\n\n\n\n\nWARNING\n這邊我使用了一個比較外掛的手段，內網穿透使用工具為 tailscalehttps://tailscale.com/安裝方式\n12curl -fsSL https://tailscale.com/install.sh | shsudo tailscale up\n\n透過內網穿透，避免麻煩的qemu端口轉發，直接對tailscale給的ip當成該機器的localhost就可以在桌機開啟網頁了。\n\n\n\n8以下指令即可進入\n1docker exec -it nginx-1 /bin/bash\n\n(左上)\n9以下指令即可查看\n12docker exec nginx-1 cat /etc/nginx/nginx.conf\n(左上)\n\n\n10在 Dockerfile 中，ENTRYPOINT 和 CMD 是兩個用於設定容器啟動後要執行的指令的指令。它們之間的差異如下：\n\nENTRYPOINT：\n\n定義容器啟動後要執行的可執行文件或指令。\n如果在執行容器時指定了指令，則會覆蓋 ENTRYPOINT 中的任何指令。\n可以將 ENTRYPOINT 視為容器的主要執行程序。\n\n\nCMD：\n\n定義在執行容器時要執行的默認指令。\n如果使用者在執行容器時提供了指令，CMD 將被忽略。\n可以將 CMD 視為 ENTRYPOINT 的默認參數。\n\n\n\n以下是一個示例 Dockerfile，展示了如何同時使用 ENTRYPOINT 和 CMD：\n1234567FROM alpine:latest# 定義 ENTRYPOINT，指定一個可執行的 shell 腳本ENTRYPOINT [&quot;/bin/sh&quot;, &quot;-c&quot;]# 定義 CMD，設置默認的參數為一個 echo 指令CMD [&quot;echo&quot;, &quot;Hello, World!&quot;]\n\n在這個 Dockerfile 中，我們使用 Alpine Linux 作為基礎映像。ENTRYPOINT 被設置為 &#x2F;bin&#x2F;sh -c，這意味著我們將在容器啟動後運行的指令解釋為 shell 腳本。CMD 被設置為 [“echo”, “Hello, World!”]，這是一個默認的指令，當使用者沒有提供指令時將被執行。\n當你建立並運行此 Docker 映像時，如果不提供任何指令，容器將啟動並執行默認的 CMD，即輸出 “Hello, World!”。如果你提供了額外的指令。例如，如果你運行以下指令：\n1docker run my-image\n\n這將啟動容器並執行默認的 CMD，結果會輸出：\n1Hello, World!\n\n但如果你運行以下指令，提供了一個替代的指令：\n1docker run my-image echo &quot;Goodbye, World!&quot;\n\n這將覆蓋默認的 CMD，而是執行提供的指令，結果會輸出：\n1Goodbye, World!\n\n這展示了 CMD 如何提供一個默認指令，而 ENTRYPOINT 則定義了容器啟動後要執行的程序，但這個程序可以在運行時被替換。\n\n\n11.Docker Compose 是一個用於定義和運行多個 Docker 容器應用程序的工具。它允許使用者使用 YAML 文件定義應用程式的服務、環境變數、網路設置和卷等資源，並且可以使用單個指令來啟動、停止、管理整個應用程式的生命週期。\n   主要差別：\n\nDocker 是一個用於建立、部署和執行容器的平台，而 Docker Compose 則是用於定義和管理多個容器應用程式的工具。\nDocker 主要用於單個容器的操作，而 Docker Compose 則用於多個容器之間的聯合操作。\nDocker Compose 可以使用一個 YAML 文件來定義應用程式的配置，包括容器、網路、卷等，而 Docker 需要使用多個指令來操作單個容器。\n\n\n\n12.   (a) 在背景啟動所有服務：       1docker-compose up -d       - 此指令會在背景啟動所有在 docker-compose.yml 文件中定義的服務。\n   (b) 暫停所有服務：       1docker-compose pause       - 此指令會暫停所有在 docker-compose.yml 文件中定義的服務。\n   (c) 刪除所有服務、network 與 volume：       1docker-compose down --volumes       - 此指令會停止並刪除所有在 docker-compose.yml 文件中定義的服務，並同時刪除相關的網路和卷。\n\n\nApplication13 sl-apline1234567891011121314151617FROM alpine:latestRUN apk update &amp;&amp; \\    apk add --no-cache \\    git \\    make \\    ncurses-dev \\    gcc \\    g++ \\    libc-dev \\    &amp;&amp; rm -rf /var/cache/apk/*RUN git clone https://github.com/mtoyoda/sl.git /slWORKDIR /slRUN makeCMD [&quot;./sl&quot;]\n12docker build -t sl .docker run --rm -it sl \n\n\n\n14 MySQL + phpadmin docker compose1234567891011121314151617181920212223242526272829303132333435version: &quot;3&quot;services:  db:    image: mysql:latest    container_name: 41173058h    environment:      MYSQL_ROOT_PASSWORD: secret      MYSQL_DATABASE: my_db      MYSQL_PASSWORD: secret    ports:      - &quot;6033:3306&quot;    volumes:      - db_data:/var/lib/mysql    restart: always    networks:      - nasa-net  phpmyadmin:    image: phpmyadmin/phpmyadmin    links:      - db    environment:      PMA_HOST: db      PMA_PORT: 3306    restart: always    ports:      - 8888:80    networks:      - nasa-netnetworks:  nasa-net:volumes:  db_data:\n12docker-compose up -ddocker-compose down\n\n\n\n\n\n\n\nWARNING\n這邊我使用了一個比較外掛的手段，內網穿透使用工具為 tailscalehttps://tailscale.com/安裝方式\n12curl -fsSL https://tailscale.com/install.sh | shsudo tailscale up\n\n透過內網穿透，避免麻煩的qemu端口轉發，直接對tailscale給的ip當成該機器的localhost就可以在桌機開啟網頁了。\n\n\n\n\n15\n以下是 Kubernetes 的基礎元件、每種節點的角色及其基本元件的說明，以及使用 Kubernetes 的好處：\nKubernetes 基礎元件：\nMaster Components (控制平面組件)：\n\nkube-apiserver: Kubernetes API 的前端，負責提供 RESTful API 來管理整個 Kubernetes 叢集。\nkube-controller-manager: 監控控制器，負責監控集群狀態並根據預期狀態進行集群中的操作。\nkube-scheduler: 負責將 Pod 調度到叢集中的節點上，根據各種條件（如資源需求、策略等）選擇適當的節點。\n\n\nNode Components (工作節點組件)：\n\nkubelet: 在每個節點上運行，負責管理容器的生命週期、掛載卷 (Volumes) 和其他與容器相關的任務。\nkube-proxy: 負責在節點上實現 Kubernetes 服務的代理和負載平衡。\nContainer Runtime: Kubernetes 支援多種容器運行時，如 Docker、containerd 等。\n\n\netcd：\n\n分佈式 key-value 存儲系統，用於存儲 Kubernetes 集群的所有配置數據，包括集群狀態、配置和元數據等。\n\n\n\n叢集中每一種 node 所扮演的角色及其基本元件的作用：\nMaster Node：\n\n主要負責叢集的控制和管理。\n基本元件：kube-apiserver、kube-controller-manager、kube-scheduler、etcd。\n\n\nWorker Node：\n\n在叢集中運行應用程序工作負載。\n基本元件：kubelet、kube-proxy、Container Runtime。\n\n\nPod：\n\n定義：Pod 是 Kubernetes 中最小的可部署單位，它可以包含一個或多個容器，這些容器共享同一個網絡命名空間、IP 地址和資源。\n\n特點：\n\n共享網絡命名空間：Pod 中的容器共享同一個網絡命名空間，它們可以通過 localhost 直接相互通信。\n共享存儲：Pod 中的容器可以共享存儲卷 (Volumes)，這使得它們可以在同一個 Pod 內共享數據。\n單獨調度：Pod 作為調度的基本單元，通常會被一起部署到同一個節點上，但 Kubernetes 也支援將不同的 Pod 調度到不同的節點上。\n\n\n角色：\n\n在叢集中的節點上運行，Pod 中的容器共享同一個節點的資源和環境。\n\n\n目的：\n\n提供一個單元化的調度和管理單位，方便應用程序的部署、管理和擴展。\n在 Kubernetes 中，Pod 是最基本的部署單元，用於包裝應用程序的相關容器並管理它們的生命週期。每個節點可以運行多個 Pod，這些 Pod 可以包含不同的應用程序或服務，通過 Kubernetes 的調度和管理，實現高效的資源利用和服務部署。\n\n\n\n\n\n使用 Kubernetes 的好處：\n自動部署和擴展：Kubernetes 可以自動部署和擴展應用程序，根據負載和需求動態調整資源。\n高可用性：Kubernetes 提供了高可用性的服務，並能夠自動恢復節點或應用程序失敗。\n容錯性：Kubernetes 具有容錯機制，可以應對節點或應用程序失敗，確保服務持續可用。\n彈性伸縮：Kubernetes 允許彈性伸縮，根據需求動態調整容器實例的數量，以確保資源的有效利用。\n服務發現和負載平衡：Kubernetes 提供了內建的服務發現和負載平衡功能，可以輕鬆地將流量分發到不同的容器實例中。\n容器管理：Kubernetes 提供了豐富的容器管理功能，包括生命周期管理、資源管理、存儲管理等，使容器化應用程序更易於管理和操作。\n\n\n\n16 final\n\n\n\n\n\n\nWARNING\n以下有不少失敗案例，我會一列舉最後有成功部屬服務，不過未完成所有要求，希望能給我部分分數::::::info\n建立VM空間\n1qemu-img create -f qcow2 -o cluster_size=2M ubuntu2.qcow2 20G\n建立VM\n123456789101112virt-install \\--name=G36VM02 \\--vcpus=4 \\--memory=8192 \\--disk path=/tmp2/41173058h/nasahw5/ubuntu2.qcow2,size=20 \\--cdrom=ubuntu.iso \\--os-variant=ubuntu20.04 \\--network=default \\--console pty,target_type=serial \\--graphics vnc,listen=0.0.0.0,password=0910  \\--noautoconsole\n設定 port fwd\n1virsh qemu-monitor-command --hmp G36VM02 &#x27;hostfwd_add ::3600-:22&#x27;\n::::::warning\n失敗手段一使用 docker-compose 後再使用自動化YAML configuration file 部署工具:Translate a Docker Compose File to Kubernetes Resources\nhttps://kubernetes.io/docs/tasks/configure-pod-container/translate-compose-kubernetes/\n12345678910111213141516171819202122232425262728293031323334353637383940414243444546version: &#x27;3.7&#x27;services:  nginx:    image: nginx:latest    container_name: nginx-41173058h    ports:      - &quot;8888:80&quot;    volumes:      - ./nginx/conf.d:/etc/nginx/conf.d      - ./nginx/html:/usr/share/nginx/html    depends_on:      - php  php:    image: php:7-fpm    container_name: php-41173058h    volumes:      - ./php:/var/www/html    ports:      - &quot;7070:80&quot;    depends_on:      - mysql  mysql:    image: mysql:5.7    container_name: mysql-41173058h    environment:      - MYSQL_ROOT_PASSWORD=password    volumes:      - db_data:/var/lib/mysql    ports:      - &quot;6033:3306&quot;  phpmyadmin:    image: phpmyadmin/phpmyadmin    container_name: phpmyadmin-41173058h    ports:      - &quot;8080:80&quot;    depends_on:      - mysql    environment:      PMA_HOST: db      PMA_PORT: 3306      PMA_ARBITRARY: 1volumes:  db_data:\n:::失敗原因沒辦法對 Volume Type 進行自動建立 hostPath,local volume type\n1234Volume mount on the host &quot;/home/g36maid/juejin/nginx/conf.d&quot; isn&#x27;t supportedVolume mount on the host &quot;/home/g36maid/juejin/nginx/html&quot; isn&#x27;t supportedVolume mount on the host &quot;/home/g36maid/juejin/php&quot; isn&#x27;t supported\n:::warning\n方法二透過 helm chart 全自動部屬 k8s 與 docker\n Helm 是一個管理 Kubernetes 應用程式的套件，透過 Helm Charts 這套系統，可以幫助開發者打包，安裝，升級相關的 Kubernetes 應用程式。\n此外， Helm Charts 本身也被設計得很容易去創造，版本控制，分享以及發佈，所以透過 Helm Charts 就可以避免到處 Copy-and-Paste 各式各樣的 Yaml。\nhttps://artifacthub.io/packages/helm/bitnami/phpmyadminhttps://artifacthub.io/packages/helm/bitnami/mysql\n有成功部屬 MySQL + phpmyadmin 的完整服務且都建立在 minikube 的 service 均須接上你所部署的 deployment (因為helm chart把兩者包起來了)\n部屬成功檔案在這當然內部還有其他髒亂檔案\nhttps://drive.google.com/file/d/1P98vj0DRpbPweCjaczu7Z6ub2KjafaG9/view?usp=sharing::::::warning\n方法三 修改以成功部屬的服務來完成需求對docker-compose.yml進行修改\n基礎來源是這個https://github.com/nanoninja/docker-nginx-php-mysql首先git clone https://github.com/nanoninja/docker-nginx-php-mysql.gitcd docker-nginx-php-mysql\nProject tree123456789101112131415161718192021222324252627.├── Makefile├── README.md├── data│   └── db│       ├── dumps│       └── mysql├── doc├── docker-compose.yml├── etc│   ├── nginx│   │   ├── default.conf│   │   └── default.template.conf│   ├── php│   │   └── php.ini│   └── ssl└── web    ├── app    │   ├── composer.json.dist    │   ├── phpunit.xml.dist    │   ├── src    │   │   └── Foo.php    │   └── test    │       ├── FooTest.php    │       └── bootstrap.php    └── public        └── index.php\n修改以下檔案為:\n123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657version: &#x27;3&#x27;services:    web:        image: nginx:alpine        container_name: nginx-41173058h        volumes:            - &quot;./etc/nginx/default.conf:/etc/nginx/conf.d/default.conf&quot;            - &quot;./etc/ssl:/etc/ssl&quot;            - &quot;./web:/var/www/html&quot;            - &quot;./etc/nginx/default.template.conf:/etc/nginx/conf.d/default.template&quot;        ports:            - &quot;8888:80&quot;            - &quot;3000:443&quot;        environment:            - NGINX_HOST=$&#123;NGINX_HOST&#125;        command: /bin/sh -c &quot;envsubst &#x27;$$NGINX_HOST&#x27; &lt; /etc/nginx/conf.d/default.template &gt; /etc/nginx/conf.d/default.conf &amp;&amp; nginx -g &#x27;daemon off;&#x27;&quot;        restart: always        depends_on:            - php            - mysqldb    php:        image: nanoninja/php-fpm:8.1        restart: always        volumes:            - &quot;./etc/php/php.ini:/usr/local/etc/php/conf.d/php.ini&quot;            - &quot;./web:/var/www/html&quot;    composer:        image: &quot;composer&quot;        volumes:            - &quot;./web/app:/app&quot;        command: install    myadmin:        image: phpmyadmin/phpmyadmin        container_name: phpmyadmin-41173058h        ports:            - &quot;8080:80&quot;        environment:            - PMA_ARBITRARY=1            - PMA_HOST=$&#123;MYSQL_HOST&#125;        restart: always        depends_on:            - mysqldb    mysqldb:        image: mysql:$&#123;MYSQL_VERSION&#125;        container_name: mysql-41173058h        restart: always        env_file:            - &quot;.env&quot;        environment:            - MYSQL_DATABASE=$&#123;MYSQL_DATABASE&#125;            - MYSQL_ROOT_PASSWORD=$&#123;MYSQL_ROOT_PASSWORD&#125;            - MYSQL_USER=$&#123;MYSQL_USER&#125;            - MYSQL_PASSWORD=$&#123;MYSQL_PASSWORD&#125;        ports:            - &quot;8989:3306&quot;        volumes:            - &quot;./data/db/mysql:/var/lib/mysql&quot;\n1cp web/app/composer.json.dist web/app/composer.json\n1docker-compose up -d\n1docker-compose logs -f # Follow log output\n\n一樣使用內網穿透使用工具為 tailscalehttps://tailscale.com/安裝方式\n12curl -fsSL https://tailscale.com/install.sh | shsudo tailscale up\n\n透過內網穿透，避免麻煩的qemu端口轉發，直接對tailscale給的ip當成該機器的localhost就可以在桌機開啟網頁了。\n\n成功開啟三個服務與網頁\n\n","slug":"NASA-05","date":"2024-03-17T16:00:00.000Z","categories_index":"","tags_index":"NASA","author_index":"G36maid"},{"id":"e0230616a66570d701934c98e3ecd1c8","title":"NASA-04","content":"NASA HW 04學生鍾詠傑學號41173058H\n\n\n1. 迷星叫1.在 Cisco Switch 上我們可以指定一個埠口為 Access Port 或者 Trunk Port，請問這兩者有什麼差異，請完成下列表格。\n\n\n\n\n可通過的 VLAN 數量\n802.1Q 標記\n\n\n\nAccess Port\n僅限於一個 VLAN\n不進行 802.1Q 標記\n\n\nTrunk Port\n可通過多個 VLAN\n進行 802.1Q 標記\n\n\n\n\n2.請問何謂 Trunk Native VLAN？\nTrunk Native VLAN 是指在一個 Trunk Port 上，未標記（即未打上 802.1Q 標籤）的封包所屬的 VLAN。\n當封包從 Trunk Port 進入或離開交換機時，如果封包未標記，則交換機將其視為屬於 Trunk Native VLAN。\n通常情況下，交換機的 Trunk Native VLAN 與管理人員設置的其他 VLAN 是分開的。這樣做的目的是為了確保 Trunk Port 能處理未標記的封包，以及在需要時能夠區分它們屬於哪個 VLAN。\n\n\n3.\n\n\n傳遞方向\n線路 1\n線路 2\n線路 3\n線路 4\n線路 5\n能否抵達\n\n\n\nPC-01&#x2F;VLAN 10 → PC-02\n10\n10\n\n\n\n可\n\n\nPC-01&#x2F;VLAN 20 → PC-02\n20\nX\n\n\n\n否\n\n\nPC-01&#x2F;VLAN 10 → PC-04\n10\n\n無\n\nX\n否\n\n\nPC-01&#x2F;VLAN 20 → PC-04\n20\n\n20\n\n20\n可\n\n\nPC-01&#x2F;VLAN 10 → PC-03\n10\n\n\n10\n\n可\n\n\nPC-01&#x2F;VLAN 20 → PC-03\n20\n\n\n20\n\n可\n\n\n\n\n4.在這個網路中有機會能透過 Double Tagging Attack 從 PC-01&#x2F;VLAN 10 傳送到 PC-04。\nPC-01 的 VLAN 10 封包通過 Trunk Port 發送到 switch-01，然後通過帶有 VLAN 10 和 VLAN 20 的 Trunk 連接發送到 switch-02。然而，在 switch-01 到 switch-02 的 Trunk 連接上，VLAN 10 被設定為 Native VLAN。\nNative VLAN 是在 Trunk 連接上未打上 VLAN 標籤的默認 VLAN，但在這個情況下，switch-01 將 Native VLAN 設置為 VLAN 10。\n由於 VLAN 10 是 Native VLAN，因此從 switch-01 到 switch-02 的 Trunk 連接上傳輸的 VLAN 10 封包將不會被打上 VLAN 標籤。因此，當這些不帶 VLAN 標籤的封包到達 switch-02 時，switch-02 將會將它們視為屬於其本地 VLAN 20（即目標 VLAN）的封包進行處理。\n所以 PC-01 發送的 VLAN 10 封包在特定情況下能夠發送到 PC-02 。\n\n\n2. 春日影part1密碼有以下\n12enable secret 5 $1$mERr$xOBRtHD8zJf.94CGVuvjw/username RiNG privilege 15 password 7 0813435D0C150C16\n一種是Cisco的Type 7加密形式，一種是Type 5加密形式。前者是Cisco自己的加密形式，存在多年，但是這種加密方式很簡單，是可以進行破解的。後者相當於MD5加密，是無法被破解的。\n透過 0813435D0C150C16 經過解密工具可以知道密碼是Roselia\n工具:https://www.firewall.cx/cisco/cisco-routers/cisco-type7-password-crack.html\n\n\npart2建立VLAN 20,30將 Fa0&#x2F;1-3 規劃到 Vlan 20 設定為access，將 Fa0&#x2F;11-12 規劃到 vlan 30 設定為access，\n12345678910111213RiNG-Core(config)#vlan 20RiNG-Core(config-vlan)#exitRiNG-Core(config)#vlan 30RiNG-Core(config-vlan)#exitRiNG-Core(config)#interface range fastEthernet 0/1-3RiNG-Core(config-if-range)#switchport access vlan 20RiNG-Core(config-if-range)#exitRiNG-Core(config)#interface range fastEthernet 0/11-12RiNG-Core(config-if-range)#switchport mode access RiNG-Core(config-if-range)#switchport access vlan 30RiNG-Core(config-if-range)#exit\nRiNG-Edge 中建立Vlan 20 並將 Fa0&#x2F;21-22 規劃到 Vlan 20 設定為access\n1234567RiNG-Edge(config)#vlan 20RiNG-Edge(config-vlan)#exitRiNG-Edge(config)#interface range fastEthernet 0/21-22RiNG-Edge(config-if-range)#switchport mode access RiNG-Edge(config-if-range)#switchport access vlan 20RiNG-Edge(config-if-range)#exit\n以下設定在RiNG-Core RiNG-Edge 中都有做刪除vlan 10 \n123RiNG-Core# configure terminalRiNG-Core(config)#RiNG-Core(config)# no vlan 10\n改名vlan 20 30\n123456RiNG-Core(config)#vlan 20RiNG-Core(config-vlan)#name VLAN-MyGORiNG-Core(config-vlan)#exitRiNG-Core(config)#vlan 30RiNG-Core(config-vlan)#name VLAN-AveMujicaRiNG-Core(config-vlan)#exit\n將swithc 0-1 中 Gi 0&#x2F;1-2 設為 port-channel 開啟 Trunk模式\n1234567891011121314151617### Trunk : 多個 VLANRiNG-Core(config)# interface GigabitEthernet 0/1-2\t\t// specify interfaceRiNG-Core(config-if-range)# switchport mode trunk\t\t\t\t// force mode TRUNKRiNG-Core(config-if-range)# switchport trunk allowed vlan 20,99RiNG-Core(config-if)# exit// 1. add physical ports into port channelRiNG-Core(config-if)# interface range GigabitEthernet 0/1-2RiNG-Core(config-if-range)# channel-group 1 mode activeRiNG-Core(config-if-range)# exit// 2. create a new port channelRiNG-Core(config)# interface port-channel 1RiNG-Core(config-if)# switchport mode trunkRiNG-Core(config-if)# switchport trunk allowed vlan 20,99RiNG-Core(config-if)# exit\n\n\n\npart3調整帳號 RiNG 的密碼為 secret 模式，且更改密碼為 Afterglow如過對兩個密碼使用相同的用戶名所以我採取以下措施:添加帶有秘密密碼的新用戶&lt;&lt;-這作為備份，以防刪除舊用戶名後無法存取任何內容。刪除舊的用戶名命令，然後使用秘密密碼再次添加它。\n以下設定在 RiNG-Core 跟 RiNG-Edge 中的做法一樣\n12345678910111213141516171819RiNG-Core(config)#username RiNG_backup secret RoseliaRiNG-Core(config)#exitRiNG-Core#RiNG-Core#write memory Building configuration...[OK]RiNG-Core#configure terminal RiNG-Core(config)#no username RiNGRiNG-Core(config)#exitRiNG-Core#write memory Building configuration...[OK]RiNG-Core#conf tRiNG-Core(config)#username RiNG secret AfterglowRiNG-Core(config)#no username RiNG_backupRiNG-Core(config)#exitRiNG-Core#write memoryBuilding configuration...[OK]\n啟動 RiNG-Core 的 Telnet&#x2F;SSH 登入這部分 RiNG-Edge 不用做\n123RiNG-Core(config)# ip domain-name Ring_CoreRiNG-Core(config)# crypto key gen rsa輸入1024\n設定 RiNG-Core 和 RiNG-Edge 的 vty 0-4 都可以使用 (a) 的帳密且只能透過 SSH 登入123RiNG-Core(config)# line vty 0 4RiNG-Core(config-line)# transport input sshRiNG-Core(config-line)# login local\n\n設定 RiNG-Core 和 RiNG-Edge 的 vty 5-15 都無法登入12RiNG-Core(config)# line vty 5 15RiNG-Core(config-line)# transport input none\n設定 RiNG-Core 和 RiNG-Edge 的 SSH 版本為 v212RiNG-Core(config)# ip ssh version 2RiNG-Core(config)# do wr //儲存\n\n\n\n3. 無路矢1.\n以上是經過手動&#x2F;release &#x2F;renew 之後，使用Wireshark觀察手動filter DHCP在使用Wireshark來觀察通過DHCP協定自動取得網路組態的過程時，我們可以觀察到以下四個階段，也就是DORA：\n\nDiscover (尋找)： 在這個階段，客戶端（即你的電腦）向網絡中的DHCP伺服器發送尋找請求。這個尋找請求是一個廣播消息，目的是尋找可用的DHCP伺服器。\n\nOffer (提供)： DHCP伺服器收到尋找請求後，如果有可用的IP地址和設定資訊，就會向客戶端發送一個提供消息。這個消息包含了IP地址、子網掩碼、網關等資訊。\n\nRequest (請求)： 客戶端收到一個或多個提供消息後，會從中選擇一個提供消息，然後向該DHCP伺服器發送一個請求消息，表示接受該伺服器提供的設定資訊。\n\nAcknowledge (確認)： DHCP伺服器收到請求消息後，會向客戶端發送一個確認消息，表示客戶端可以開始使用提供的IP地址和設定資訊了。\n\n\n這四個階段共同構成了DHCP的過程，使得客戶端可以自動獲得網路設定資訊，而無需手動設定。\n\n\n2.在DHCP Discover階段中，以下是特殊的IP&#x2F;MAC地址以及它們的含義：\n\nIP 0.0.0.0：\n\n涵義：表示客戶端尚未擁有有效的IP地址。\n原因：在DHCP Discover階段，客戶端尚未獲得有效的IP地址，因此它在尋找可用的DHCP伺服器時使用0.0.0.0作為源IP地址。\n\n\nIP 255.255.255.255：\n\n涵義：表示廣播地址，用於將消息發送到網絡中的所有主機。\n原因：在DHCP Discover階段，客戶端尋找可用的DHCP伺服器，因此將尋找請求消息廣播到網絡中的所有主機，以便任何可用的DHCP伺服器都能接收到。\n\n\nMAC FF:FF:FF:FF:FF:FF：\n\n涵義：表示廣播MAC地址，用於將消息發送到網絡中的所有主機。\n原因：與IP 255.255.255.255相似，在以太網中，MAC地址FF:FF:FF:FF:FF:FF是一個特殊的廣播地址，它將消息發送到網絡中的所有主機，以便任何可用的DHCP伺服器都能接收到尋找請求消息。\n\n\n\n在DHCP Discover階段，使用這些特殊地址可以確保所有的DHCP伺服器都能收到尋找請求訊息(對所有人請求)\n\n\n３.以下是對RiNG-Core 進行 dhcp snooping 的方式並對FA0&#x2F;22設定為信任(預設為否)\n1234567891011RiNG-Core#conf terminal Enter configuration commands, one per line.  End with CNTL/Z.RiNG-Core(config)#ip dhcp snooping vlan 1RiNG-Core(config)#inRiNG-Core(config)#interface faRiNG-Core(config)#interface fastEthernet 0/22RiNG-Core(config-if)#ip dhRiNG-Core(config-if)#ip dhcp sRiNG-Core(config-if)#ip dhcp snooping tRiNG-Core(config-if)#ip dhcp snooping trust RiNG-Core(config-if)#exit\nRef:https://www.youtube.com/watch?v=2eNsoS9Ri6w&amp;ab_channel=NorthwoodsPS\n\n\n指令備份mode12345678910111213meow&gt;\t\t\t\t\t\t\t\t\t\t\t// user EXECmeow&gt; enablemeow#\t\t\t\t\t\t\t\t\t\t\t// privileged EXECmeow# configure terminalmeow(config)#\t\t\t\t\t\t\t\t\t// global configurationmeow(config)# interface GigabitEthernet 1/0/1meow(config-if)#\t\t\t\t\t\t\t\t\t// interface configurationmeow(config-if)# exitmeow(config)#\t\t\t\t\t\t\t\t\t// global configurationmeow(config)# exitmeow#\t\t\t\t\t\t\t\t\t\t\t// privileged EXECmeow# disablemeow&gt;\t\t\t\t\t\t\t\t\t\t\t// user EXEC\nVLAN123meow(config)# vlan 99\t\t\t\t\t\t\t\t// create a vlanmeow(config-vlan)# exit\nAccess : 單一 VLAN12345meow(config)# interface FastEthernet 1/0/1\t\t\t// specify interfacemeow(config-if)# switchport mode access\t\t\t// force mode ACCESSmeow(config-if)# switchport access vlan 123meow(config-if)# exi\nTrunk : 多個 VLAN12345meow(config)# interface GigabitEthernet 1/0/2\t\t// specify interfacemeow(config-if)# switchport mode trunk\t\t\t\t// force mode TRUNKmeow(config-if)# switchport trunk allowed vlan 1-10,123meow(config-if)# exit\nPort Channel : 多個 Port1234567891011// 1. add physical ports into port channelmeow(config-if)# interface range GigabitEthernet 1/0/1-4 meow(config-if-range)# channel-group 1 mode activemeow(config-if-range)# exit// 2. create a new port channelmeow(config)# interface port-channel 1meow(config-if)# switchport mode trunkmeow(config-if)# switchport trunk allowed vlan 1-10,123meow(config-if)# exit\nother123meow# copy running-config startup-config\t// method 1meow# write memory\t\t\t\t\t\t// method 2meow(config)# do wr\n123meow# show ...\t\t\t\t\t// in privileged EXECmeow(config)# do show ...\t\t\t// at or above global configuration\n","slug":"NASA-04","date":"2024-03-10T16:00:00.000Z","categories_index":"","tags_index":"NASA","author_index":"G36maid"},{"id":"e1649b2caf89f596a96590432091889f","title":"NASA-03","content":"NASA HW3refb12202064Arch wiki\n\n\n\n1 Initial partition使用 cfdisk 建立分區\n\n\n2 RAID Setup使用 mdadm 建立raid陣列\n123456mdadm --create --verbose \\\t--level=10 \\\t--metadata=1.2 \\\t--raid-devices=4 \\\t/dev/md/data \\\t/dev/vdc /dev/vdd /dev/vde /dev/vdf\n123456mdadm --create --verbose \\\t--level=0 \\\t--metadata=1.2 \\\t--raid-devices=2 \\\t/dev/md/linux \\\t/dev/vdc /dev/vdd /dev/vde /dev/vdf\n\n\n\n3 Disk encryption|ref https://wiki.archlinux.org/title/dm-crypt/Device_encryption\ncryptboot:cryptsetup luksFormat --type luks1 /dev/vda2\n輸入密碼\n1234cryptsetup open /dev/vda2 cryptbootdd if=/dev/urandom of=/root/key_file bs=256 count=1cryptsetup luksAddKey /dev/vda2 /root/key_file\ncryptroot:\n123cryptsetup luksFormat --type luks2 /dev/md/linux /root/key_file  cryptsetup open --type luks2 /dev/md/linux cryptroot --key-file /root/key_filecryptsetup luksAddKey /dev/md/linux\n輸入密碼cryptdata:\n12cryptsetup luksFormat --type luks2 /dev/md/linux cryptsetup open --type luks2 /dev/md/data cryptroot --key-file /root/key_file\n\n\n\n4 LVM12345pvcreate /dev/mapper/linuxvgcreate linux /dev/mapper/linuxlvcreate -L 256M -n home linuxlvcreate -l 100%FREE -n root linux\n\n\n\n5 Formatting12345mkfs.ext4 /dev/linux/homemkfs.ext4 /dev/linux/rootmkfs.xfs /dev/mapper/cryptdatamkfs.ext2 /dev/mapper/cryptboot\n\n\n\n6 mount\n掛載 &#x2F;dev&#x2F;linux&#x2F;root 到 &#x2F;mnt：\n1mount /dev/linux/root /mnt\n創建 &#x2F;mnt&#x2F;home 目錄，然後掛載 &#x2F;dev&#x2F;linux&#x2F;home 到 &#x2F;mnt&#x2F;home：\n12mkdir /mnt/homemount /dev/linux/home /mnt/home\n\n\n創建 &#x2F;mnt&#x2F;boot 目錄，然後掛載 &#x2F;dev&#x2F;mapper&#x2F;cryptboot 到 &#x2F;mnt&#x2F;boot：\n12mkdir /mnt/bootmount /dev/mapper/cryptboot /mnt/boot\n\n創建 &#x2F;mnt&#x2F;data 目錄，然後掛載 &#x2F;dev&#x2F;mapper&#x2F;cryptdata 到 &#x2F;mnt&#x2F;data：\n12mkdir /mnt/datamount /dev/mapper/cryptdata /mnt/data\n\n\n\n\n\n7安裝必要\n123# pacstrap /mnt base linux linux-firmware# pacstrap /mnt mdadm、lvm2# pacstrap /mnt vim man-db\n生成符合作業要求的 fstab\n1# genfstab -U /mnt &gt;&gt; /mnt/etc/fstab\n\n12# arch-chroot /mnt/etc/hostname\n修該mkinitcpio\n12vim /etc/mkinitcpio.cong# mkinitcpio -P\n編輯 crypttab\n1vim /etc/crypttab\n\n安裝 GRUBhttps://wiki.archlinuxcn.org/wiki/GRUB\n12exitreboot\n\n結束成功進入系統但是來不及截圖了(3&#x2F;10 09:55)\n\n\n8. Trivia（32 分，每題 4 分）以下為簡答題，若有過程中用到的指令也請一併附上。請讓你的答案簡短扼要，非必要的資訊可以省略。\n(a)一個使用中的硬碟上除了已經切好的 partition 外，還會有什麼東西？\n除了已經切好的 partition 外，硬碟上可能還有檔案系統、檔案、目錄等資料。\n(b)在工作站上輸入 df &#x2F; 指令時，會得到下圖的輸出，請問為什麼 Available + Used &lt; 1Kblocks？Figure 4: df 指令的輸出\n(c)什麼是 FUSE (Filesystem in Userspace)？請簡單介紹它的原理，給出一個優點和缺點，並舉出一個在 Linux 上用了這項技術才能支援的檔案系統。\nFUSE 是一個允許非特權用戶在使用者空間實現檔案系統的工具。原理是透過使用者空間的程式和內核模塊通信。優點是不需特權權限即可實現新檔案系統，缺點是性能可能較低。\n例子：sshfs。\n(d)你在幫新的硬碟建立分割區的時候可能看過 MBR 和 GPT 這兩個詞。請問他們分別代表了什麼，並列出至少兩個差別。\nMBR 是 Master Boot Record，GPT 是 GUID Partition Table。\n差異包括分割數量限制、硬碟大小支援、資料備份位置等。\n(e)許多修 NASA 的同學都會有一台同時裝了 Windows 和 Linux 的電腦。為了避免浪費儲存空間，你可能會享有同時被這兩個作業系統支援的硬碟來存放你常用的大檔案 (e.g. Steam遊戲庫)。請找到滿足以下條件的檔案系統，並給出掛載這個檔案系統需要用到的指令 (例如：mount -t ext4 &#x2F;dev&#x2F;sda &#x2F;mnt)：• 能支援超過 4 GiB 的單一檔案• 兩個系統 (Windows 11, Arch Linux) 皆原生支援讀寫（即不須另外的驅動程式&#x2F;KernelModule，且不得使用 FUSE 來掛載）• 在 Windows 11 下支援日誌功能 (日誌檔案系統)\n檔案系統: NTFS\n指令: mount -t ntfs /dev/sdX /mnt (根據需求)\nhttps://wiki.archlinux.org/title/NTFS\n(f)根據 SI 及 IEC 的定義，GB 和 GiB 分別指的是多少 Bytes？在工作站上使用 ls -lh 時，預設使用的是哪種單位呢？\nGB &#x3D; 1,000,000,000 Bytes，GiB &#x3D; 1,073,741,824 Bytes。ls -lh 預設使用 SI 單位。\n(g)假設都是 4 個硬碟，請比較它們組成 RAID 0, RAID 10, RAID 5, RAID 6 的容錯能力、讀取速度、寫入速度。容錯能力指的是最多可以幾顆硬碟損壞而不造成資料遺失。而讀取和寫入速度則假設不需考慮計算、讀寫 parity 資料的額外時間。\n\nRAID 0: 低容錯，高讀寫速度。\nRAID 10: 最多損壞一半硬碟，高讀寫速度，優秀容錯。\nRAID 5: 一顆硬碟損壞，可還原，中等讀寫速度，中容錯。\nRAID 6: 兩顆硬碟損壞，可還原，稍低讀寫速度，高容錯。\n\n(h)當使用 VM 時，如果發現將它的多個虛擬硬碟組成 RAID 0 時，其寫入速度和沒有 RAID 時幾乎沒有差別，請問可能會是什麼原因呢？\n可能是因為虛擬硬碟實際存放在同一實體硬碟上，無法充分發揮 RAID 0 的並行讀寫優勢，造成速度沒有差異\n","slug":"NASA-03","date":"2024-03-03T16:00:00.000Z","categories_index":"","tags_index":"NASA","author_index":"G36maid"},{"id":"764ef6a6164b61a74508cb7ba2b86d7f","title":"NASA-02","content":"NASA HW2學生: 鍾詠傑學號: 411783058h\nrefskyhong交流程式架構\nPixelCatdiff_output 的format\nPeachsymlink file 的檢查\n\n\n功能 1: 比較檔案內容首先，我們開始實現比較檔案內容的功能。我們定義了一個 compare_files 函式，使用 diff -d 命令來比較兩個檔案的差異。差異的計算是基於 diff 命令的輸出，包括新增（A）、刪除（B）和相同（C）的行數。我們還考慮了二進制檔案的情況，並以百分比的形式呈現不同之處。\n12345678910111213141516171819202122# Function to compare file contentscompare_files() &#123;  local path_a=&quot;$1&quot;  local path_b=&quot;$2&quot;  # Check if symbolic links should be treated as files  # ...  # Compare the contents of the files using diff -d  diff_output=$(diff -d &quot;$path_a&quot; &quot;$path_b&quot; --new-line-format=&quot;A&quot; --old-line-format=&quot;B&quot; --unchanged-line-format=&quot;C&quot;)  # Check if the files are binary  # ...  # Calculate x based on the diff output  # ...  # Output result if the files are different  if [ &quot;$x&quot; -gt 0 ]; then    echo &quot;changed $&#123;x&#125;%&quot;  fi&#125;\n\n\n\n功能 2: 比較目錄內容接著，我們擴展了腳本以支援比較目錄內容的功能。這個功能主要包括尋找目錄中的檔案，比較檔案內容，並根據不同情況輸出結果。我們使用 find 命令來獲取所有檔案的清單，並使用 comm 命令找出兩個目錄中相同和不同的檔案。\n123456789101112131415161718192021# Function to compare directory contentscompare_directories() &#123;  local dir_a=&quot;$1&quot;  local dir_b=&quot;$2&quot;  # Get a list of all regular files in both directories (excluding hidden files)  files_a=($(find &quot;$dir_a&quot; -type f ! -name &quot;.*&quot; | sed -e &quot;s|^$dir_a/||&quot; | sort))  files_b=($(find &quot;$dir_b&quot; -type f ! -name &quot;.*&quot; | sed -e &quot;s|^$dir_b/||&quot; | sort))  # Iterate through files in both directories  # ...  # Find files present in dir_a but not in dir_b  # ...  # Find files present in dir_b but not in dir_a  # ...  # Sort and output the results  # ...&#125;\n\n\n\n功能 3: 進一步優化與修正我們對腳本進行了進一步的優化和修正。其中，我們引入了一些新的命令，例如 grep、cut、mktemp、sort，以及對文件路徑的處理。我們還根據用戶的需求，支援了比較隱藏檔案、處理符號連結的選項。\n12345678# Improved directory comparison function# ...# Usage of getopts for option parsing# ...# Additional checks and validations# ...\n\n\n\n功能 5: 比較特定的檔案最後，我們實現了僅比較特定檔案的功能。這部分的修改主要是在建立檔案列表時，加入了對正則表達式的過濾。這樣用戶可以指定特定的檔案進行比較。\n1234567891011121314# Compare only files whose paths follow the REGEX &lt;EXP&gt;if [ &quot;$compare_hidden&quot; = true ] &amp;&amp; [ -n &quot;$regex_exp&quot; ]; then  # Compare hidden files with a specific regex  # ...elif [ -n &quot;$regex_exp&quot; ]; then  # Compare files with a specific regex (not considering hidden files)  # ...elif [ &quot;$compare_hidden&quot; = true ]; then  # Compare all hidden files  # ...else  # Compare all files (excluding hidden files)  # ...fi\n\n\n\n\n\n為什麼沒有完成 symlink file 的功能在比較檔案或目錄的過程中，我們使用了 diff 命令來比較檔案內容，。然而，diff 在處理符號連結（symlink）檔案時的表現可能會有一些限制。\n\ndiff 命令：diff 主要用於比較文本檔案的差異，對於二進位文件或符號連結，可能無法提供適切的比較結果。\n\n由於 Bash 腳本使用這這個命令進行比較，對於符號連結，它可能無法提供預期的結果。如果需要比較符號連結的目標文件，可以使用 readlink 命令取得符號連結指向的實際路徑，然後再進行比較。這需要對腳本進行進一步修改以支援這種情況。\n然後我時間不夠，出了預期以外的bug所以沒有完成\n結論這個 Bash 腳本專案是一個實用的目錄與檔案比較工具，提供了多種選項和功能。透過逐步實現不同的功能，我學到了如何使用各種命令來處理檔案和目錄。在這個過程中，我們不斷改進和擴展腳本，使其更加完善。\n\n\n\n使用到的 Bash 腳本知識比較檔案內容 (compare_files)\ndiff 命令: 用於比較檔案內容的基本命令，diff -d 用於生成差異報告。\ngrep 命令: 用於搜尋 diff 輸出中的特定字元。\nwc 命令: 用於計算行數，wc -l 用於計算行的數量。\n\n比較目錄內容 (compare_directories)\nfind 命令: 用於搜尋目錄中的檔案。\nsed 命令: 用於替換檔案路徑中的目錄部分。\nsort 命令: 用於排序檔案列表。\ncomm 命令: 用於比較兩個已排序檔案列表的行。\n\n選項解析及輸出格式化\ngetopts: 用於解析 Bash 腳本的命令列選項。\necho 命令: 用於輸出訊息，echo -n 用於輸出不換行。\nif-else 條件語句: 用於實現不同的選項判斷和流程控制。\nmktemp 命令: 用於生成臨時檔案。\n\n正則表達式\n正則表達式: 用於匹配檔案名稱，grep 中使用了正則表達式來過濾檔案。\n判斷檔案是否隱藏: 正則表達式 .* 用於匹配隱藏檔案。\n\n選項處理及錯誤處理\nusage 函式: 用於顯示腳本的使用說明。\n選項解析: 使用 getopts 解析命令列選項。\nif-else 條件語句: 用於處理不同選項的情況。\n錯誤處理: 使用 usage 函式處理不正確的使用方式。\n\n檔案處理及排序\n文件路徑處理: 使用 sed 分割檔案路徑，grep 過濾檔案，cut 提取特定部分。\n排序: 使用 sort 對檔案列表進行排序。\n\n迴圈及條件判斷\n迴圈: 使用 for 迴圈遍歷檔案列表。\n條件判斷: 使用 if-else 判斷檔案是否符合特定條件。\n\n文件操作\nmktemp 命令: 用於生成臨時檔案。\nrm 命令: 用於刪除臨時檔案。\n\n","slug":"NASA-02","date":"2024-02-25T16:00:00.000Z","categories_index":"","tags_index":"NASA","author_index":"G36maid"},{"id":"711f1717bcc82c85e9d597e240686838","title":"NASA-01","content":"NASA HW0NTNU 41173058H 鍾詠傑\nNetwork Administration1. True&#x2F;False1\n\n\n\n\n\n\n\n\nTure\n線上影音服務會收到的IP將會是VPN服務server的IP，我們的ip會在vpn server回傳資料給用戶才會用到\n2\n\n\n\n\n\n\n\n\nFalse\nNAT 網路外部連到 NAT 上的虛擬機器的網路是不透明的，如果沒有作Port Forwarding(端口映射)的話將無法連接到裝置\n3\n\n\n\n\n\n\n\n\nFalse\n一般來說，閘道器通常用於連接區域網路和網際網路，實現內外網的通訊。它可以提供路由、防火牆、NAT、DHCP等功能，保證網路的安全和穩定。\n4\n\n\n\n\n\n\n\n\nTure\nT 對的，該網站是http 不像https 傳出的封包有經過加密協定，所以密碼會有機會洩出\n5\n\n\n\n\n\n\n\n\nFalse\n有公網IP的server A 是無法跟只有private IP 的client 連線的，這個client只能訪問該區域網路的設備。\n6\n\n\n\n\n\n\n\n\nFalse \nDDoS 是分散式阻斷服務攻擊，是透過大量設備或是被當成殭屍的其他設備進行的大規模洪水攻擊，不是攔截攻擊。流量監控或許可以防禦。\n7\n\n\n\n\n\n\n\n\nTure \n通常來說，較長的密鑰意味著更多的可能密鑰組合，選擇越長的密鑰長度確實可以提高加密的安全性。攻擊者需要更長的時間和計算能力來進行暴力破解或其他攻擊。\n然而，隨著技術的進步，原本被視為安全的密鑰長度有時會受到新型攻擊方法的挑戰。\nrefenceVPNDNSGATEWAYHTTPSDDos\n\n\n2. ChatGPT (12 points)1\n\n\n\n\n\n\n\n\nFalse\n不對，裝置的 MAC address是可以修改的，且不是獨一無二。\n2\n\n\n\n\n\n\n\n\nFalse\n4G指的是第四代通訊協議，他指的是一種標準，這個標準有規定的傳輸速度(不是4Gb)，也有規定的傳述頻率(不是4GHz)。\n3\n\n\n\n\n\n\n\n\nfalse\n水龍頭打得更暢快的說明需要改正，可以改成有更多車牌可以發放了(從六位到七位車牌)，此外也不是不要使用IPV4，在某些情況還是可以使用IPV4(透過NAT等等方式)，不過IPV4即將枯竭也是事實，新裝置將可能無法獲得IPV4地址。\n\n\n3. Short Answer (35 points)1. 解釋以下名詞，並說明其用處( a ) DHCP動態主機設定協定（英語：Dynamic Host Configuration Protocol，縮寫：DHCP），又稱動態主機組態協定，是一個用於IP網路的網路協定，位於OSI模型的應用層，使用UDP協定工作，主要有兩個用途：\n\n用於內部網路或網路服務供應商自動分配IP位址給使用者\n用於內部網路管理員對所有電腦作中央管理\n\n( b ) VLAN虛擬區域網路（Virtual Local Area Network或簡寫VLAN，V-LAN）是一種建構於區域網路交換技術（LAN Switch）的網路管理的技術，網管人員可以藉此透過控制交換器有效分派出入區域網的封包到正確的出入埠，達到對不同實體區域網中的裝置進行邏輯分群（Grouping）管理，並降低區域網內大量資料流通時，因無用封包過多導致壅塞的問題，以及提昇區域網的資訊安全保障。\n( c ) Switch網路交換器（英語：Network switch）是一種網路硬體，通過報文交換接收和轉發資料到目標裝置，它能夠在電腦網路上連接不同的裝置。一般也簡稱為交換器。\n( d ) Broadcast stormBroadcast storm（廣播風暴）是網絡中的一種現象。同一個計算機網絡上廣播及多播訊號的累積，就會造成網路廣播風暴現象。大量的廣播或多播信號會佔用大量的網路頻寬而使正常網路信號無法流通。\n2. 判斷合法\n不是合法的地址，IP地址第一段不得為0\n::1 is the loopback address in IPv6.(回送地址)\n是合法的一組IPv6地址\n\n\n\n3. TCP&#x2F;IP 網路最特別的點就在於它分層式的架構，請針對最廣泛使用的 TCP&#x2F;IP model(共 5 層)，列出每一層的名稱(2%)，並簡述每一層的功能(2%)以及實際使用這層服務的例子(2%)。TCP&#x2F;IP 模型包含五個層次，請看以下的列舉：\n\n物理層 (Physical Layer):\n\n功能： 負責傳輸比特流，管理硬體資源。\n例子： 乙太網路傳輸電纜或光纖的物理連接。\n\n\n數據連接層 (Data Link Layer):\n\n功能： 提供可靠的點對點通信，偵測和修復錯誤。\n例子： 以太網的 MAC 地址協議，確保數據在相鄰節點間的正確傳輸。\n\n\n網路層 (Network Layer):\n\n功能： 處理路由和轉發，實現不同網路之間的通信。\n例子： IP 協議，決定數據在網際網路上的路由。\n\n\n傳輸層 (Transport Layer):\n\n功能： 提供端對端的通信，確保數據可靠地傳輸。\n例子： TCP 協議，確保應用層數據的可靠傳輸。\n\n\n應用層 (Application Layer):\n\n功能： 提供應用程序之間的通信和服務。\n例子： HTTP 協議，用於網頁瀏覽，以及SMTP 協議，用於電子郵件通信。\n\n\n\n\n\n4. 說明TCP與UDPTCP（傳輸控制協定）:傳輸控制協定（英語：Transmission Control Protocol，縮寫：TCP）是一種連接導向的、可靠的、基於位元組流的傳輸層通訊協定。他透過三次握手、四次揮手來控制連接建立與連接終止，擁有更高的可靠性。這種協議適合高可靠型的應用，例如檔案傳輸或是電子郵件等等。https://en.wikipedia.org/wiki/Transmission_Control_Protocol\nUDP（使用者資料包協定）:使用者資料包協定（英語：User Datagram Protocol，縮寫：UDP；又稱使用者資料包協定）是一個簡單的面向資料包的通訊協定。不保證數據的完整性與可靠性，也沒有握手機制來控制，因此他的延遲比較小。這種協議適合用來對即時的網路遊戲進行通訊。https://en.wikipedia.org/wiki/User_Datagram_Protocol\n比較優缺點和使用場景舉例以下是TCP和UDP的優缺點以及使用場景的比較表格：\n\n\n\n特點\nTCP\nUDP\n\n\n\n可靠性\n提供可靠的數據傳輸，重傳丟失的數據包。\n不提供可靠性，丟失的數據包不會被重傳。\n\n\n效率\n較UDP慢，因為需要進行連接建立和錯誤恢復。\n較快速，因為沒有連接建立和錯誤恢復的開銷。\n\n\n順序性\n保證數據包的順序與發送順序一致。\n不保證數據包的順序。\n\n\n連接性\n提供雙向連接，需要建立和終止連接。\n無連接性，單向發送數據包。\n\n\n使用場景\n文件傳輸、網頁訪問、電子郵件等需要可靠性的應用。\n語音通話、視頻流、在線遊戲等需要即時性的應用。\n\n\n舉例：\n\nTCP使用場景：\n\n下載文件：當你從網絡上下載文件時，TCP的可靠性確保你可以完整地下載文件而不會丟失任何部分。\n電子郵件：由於電子郵件需要確保郵件的完整傳遞，TCP被廣泛用於電子郵件協議（例如SMTP、POP3、IMAP）。\n網頁訪問：當你訪問網頁時，TCP確保所有網頁元素（如文本、圖像、視頻等）都可以正確地加載和顯示。\n\n\nUDP使用場景：\n\n線上遊戲：線上遊戲通常使用UDP來減少延遲，因為它可以傳輸即時的遊戲數據，如玩家位置和動作，而不需要等待重傳丟失的數據包。\n語音和視頻通話：VoIP（Voice over Internet Protocol）和視頻通話服務通常使用UDP，因為它們需要低延遲和即時性，而且可以容忍一定程度的數據丟失。\nDNS查詢：域名系統（DNS）使用UDP來發送查詢，因為它可以快速地獲取IP地址，而且DNS查詢往往是簡短的且可以容忍一些丟失的。\n\n\n\n\n\n5. 在系上和 NASA 團隊中有可能用到以下協定,請簡述該協定的用途並列出其預設使用的 port(各 2%)(a) LDAP &#x2F; LDAPS\nLDAP（Lightweight Directory Access Protocol)輕型目錄訪問協定\n通過IP協定提供訪問控制和維護分散式資訊的目錄資訊，在開發內部網路和與網際網路程式共享使用者、系統、網路、服務和應用的過程中占據了重要地位\n\n\nLDAPS(LDAP over SSL)\nLDAPS 是透過 SSL 加密的 LDAP，相較下更安全。\n\n\n預設port\nLDAP 389\nLDAPS 636\n\n\n\n(b) SMTP\nSMTP 簡單郵件傳送協定（英語：Simple Mail Transfer Protocol，縮寫：SMTP）\n可用在傳送和接收電子郵件的資訊，但SMTP通常用作傳送電子郵件資訊，而不是接收。\n\n\n預設port\nSMTP 25\n\n\n\n(c) SNTP\nNTP 網路時間協定（英語：Network Time Protocol，縮寫：NTP）\n是在資料網路潛伏時間可變的電腦系統之間通過封包交換進行時鐘同步的一個網路協定\n\n\nSNTP 簡單網路時間協定（Simple Network Time Protocol，SNTP） \n是一個複雜度更低的NTP實現，使用相同協定，但不需要長時間儲存狀態。被某些嵌入式系統和不需要高精度時間的應用所採用。\n\n\n預設 port\nSNMP 162\n\n\n\nHTTP (Hypertext Transfer Protocol) &#x2F; HTTPS (HTTP Secure)\nHTTP 超文本傳輸協定（英語：HyperText Transfer Protocol，縮寫：HTTP）\n是一種用於分佈式、協作式和超媒體訊息系統的應用層協定。HTTP是全球資訊網的數據通訊的基礎。\n\n\nHTTPS 超文本傳輸安全協定（英語：HyperText Transfer Protocol Secure )\n常稱為HTTP over TLS、HTTP over SSL或HTTP Secure\n是一種透過計算機網路進行安全通訊的傳輸協定。HTTPS經由HTTP進行通訊，但利用SSL&#x2F;TLS來加密封包。\n\n\n預設port\nHTTP 80\nHTTPS 443\n\n\n\nrefhttps://www.ibm.com/docs/zh-tw/ws-automation?topic=ldap-configurationhttps://docs.oracle.com/cd/E19957-01/820-0514/fxceh/index.htmlhttps://help.raritan.com/kx-ii/v2.5.0/CHT/index.htm#2727https://www.ibm.com/docs/zh-tw/b2b-integrator/6.0.1?topic=z-simple-network-management-protocol-snmp-trap-adapter\n\n\n4. Command Line Utilities (25 points)1. 找出對應的 IP address(a) www.ntu.edu.tw\n\n\n\n\n\n\n\n\n\n140.112.8.116\n(b) csie.ntu.edu.tw\n\n\n\n\n\n\n\n\n\n140.112.30.26\n打開CMD\n12345678910111213141516171819C:\\Users\\user&gt;nslookup預設伺服器:  dns.googleAddress:  8.8.8.8&gt; www.ntu.edu.tw伺服器:  dns.googleAddress:  8.8.8.8未經授權的回答:名稱:    www.ntu.edu.twAddress:  140.112.8.116&gt; csie.ntu.edu.tw伺服器:  dns.googleAddress:  8.8.8.8未經授權的回答:名稱:    csie.ntu.edu.twAddress:  140.112.30.26\n找出對應的 domain name(a) 140.112.30.25\n\n\n\n\n\n\n\n\n\nprinting.csie.ntu.edu.tw\n(b) 140.112.161.176\n\n\n\n\n\n\n\n\n\nif176.aca.ntu.edu.tw\n1234567891011121314151617C:\\Users\\user&gt;nslookup預設伺服器:  dns.googleAddress:  8.8.8.8&gt; 140.112.30.25伺服器:  dns.googleAddress:  8.8.8.8名稱:    printing.csie.ntu.edu.twAddress:  140.112.30.25&gt; 140.112.161.176伺服器:  dns.googleAddress:  8.8.8.8名稱:    if176.aca.ntu.edu.twAddress:  140.112.161.176\n\n\n\n2 NTU VPN因為我不是台大學生，以下問題使用NTNU VPN作為替代回答。\n(a) IP\n\n\n\n\n\n\n\n\n140.122.20.94\n\n(b) IP連線前 8.8.8.8\n1234567nslookup csie.ntnu.edu.tw伺服器:  dns.googleAddress:  8.8.8.8未經授權的回答:名稱:    csie.ntnu.edu.twAddress:  140.122.185.1\n\n連線後 140.122.65.9\n1234567nslookup csie.ntnu.edu.tw伺服器:  cc.ntnu.edu.twAddress:  140.122.65.9未經授權的回答:名稱:    csie.ntnu.edu.twAddress:  140.122.185.1\n圖片連線前連線後\nrouting path連線前\nDNS server1234567891011121314151617C:\\Users\\user&gt;tracert 8.8.8.8在上限 30 個躍點上追蹤 dns.google [8.8.8.8] 的路由:  1     1 ms    &lt;1 ms    &lt;1 ms  172.23.63.254  2     2 ms     1 ms    &lt;1 ms  111.185.1.126  3     4 ms     1 ms     1 ms  CHANDER-BR93-1-PO301-AR93-1.IX.kbtelecom.net [203.187.22.85]  4     4 ms    &lt;1 ms     1 ms  TPNOC1-NC93-PO95-CHANDER.IX.kbtelecom.net [203.187.3.57]  5     3 ms     1 ms     1 ms  TPNOC1-P93-1-ETH1-50-NC93.IX.kbtelecom.net [203.187.9.18]  6     4 ms     1 ms     1 ms  CHIEF-P93-1-PO6-TPNOC1.IX.kbtelecom.net [203.187.6.30]  7     4 ms     1 ms     1 ms  72.14.221.34  8    54 ms     2 ms     2 ms  192.178.105.187  9     5 ms     2 ms     2 ms  209.85.245.65 10     1 ms    &lt;1 ms    &lt;1 ms  dns.google [8.8.8.8]追蹤完成。\ntarget123456789101112131415161718C:\\Users\\user&gt;tracert csie.ntnu.edu.tw在上限 30 個躍點上追蹤 csie.ntnu.edu.tw [140.122.185.1] 的路由:  1     1 ms    &lt;1 ms    &lt;1 ms  172.23.63.254  2     2 ms     1 ms    &lt;1 ms  111.185.1.126  3     3 ms     1 ms    &lt;1 ms  CHANDER-BR93-1-PO301-AR93-1.IX.kbtelecom.net [203.187.22.85]  4     2 ms    &lt;1 ms    &lt;1 ms  TPNOC1-NC93-PO95-CHANDER.IX.kbtelecom.net [203.187.3.57]  5    38 ms    41 ms    38 ms  TPNOC1-P65-S2T-10G4-5-NC93.IX.kbtelecom.net [203.187.9.10]  6     5 ms     1 ms     2 ms  NTU-G35-G0-2-TPNOC1-P65.IX.homeplus.net.tw [203.133.92.110]  7     7 ms     3 ms     2 ms  NTU-1000M-GIGA.IX.homeplus.net.tw [203.133.92.66]  8     5 ms     2 ms     3 ms  192.192.7.158  9     7 ms     4 ms     4 ms  140.122.6.209 10     5 ms     3 ms     4 ms  140.122.128.2 11     *        7 ms     5 ms  140.122.134.2 12     *        *        *     要求等候逾時。 13     *        *        *     要求等候逾時。\n\n連線後\nDNS server123456追蹤 mail.csie.ntnu.edu.tw [140.122.185.1] 的路由:  1     1 ms     1 ms     1 ms  140.122.7.21  2     4 ms     2 ms     1 ms  140.122.7.17  3     3 ms     2 ms     2 ms  140.122.128.2  4     *        3 ms     2 ms  140.122.134.2\ntarget12345678追蹤 ns1.ntnu.edu.tw [140.122.65.9] 的路由:  1     1 ms     1 ms     2 ms  140.122.7.21  2     4 ms     2 ms     2 ms  140.122.7.17  3     3 ms     3 ms     2 ms  140.122.6.146  4     4 ms     2 ms     2 ms  ns1.ntnu.edu.tw [140.122.65.9]追蹤完成。\n\n\n\n3\n\n\n\n\n\n\n\n\n有找到一個18763&#x2F;tcpNASA{P4-3_Y0u_Found_M3!}\n12345678910111213141516sudo nmap -p- 140.112.30.158Starting Nmap 7.80 ( https://nmap.org ) at 2024-02-22 08:33 CSTNmap scan report for 140.112.30.158Host is up (0.0052s latency).Not shown: 65532 closed portsPORT      STATE SERVICE2000/tcp  open  cisco-sccp5060/tcp  open  sip18763/tcp open  unknownNmap done: 1 IP address (1 host up) scanned in 392.67 secondsmiku@DESKTOP-HLSSCVT:~$ nc -v 140.112.30.158 18763Connection to 140.112.30.158 18763 port [tcp/*] succeeded!NASA&#123;P4-3_Y0u_Found_M3!&#125;\n\n\n\n\nSystem AdministrationSA1\n\n\n\n\n\n\n\n\nNASA{p1_i_AM_r00t!}\n進入系統\n12nasa-internnasa2024\n取得FLAG\n123sudo su./p1-checkerNASA&#123;p1_i_AM_r00t!&#125;\nSA2\n\n\n\n\n\n\n\n\nNASA{P2_P4CM4N_1$_TH3_M4N}\n12man pacmanNASA&#123;P2_P4CM4N_1$_TH3_M4N&#125;\nSA3\n\n\n\n\n\n\n\n\n本題無 Flag\n12sudo pacman -S opensshsystemstl enable sshd.service\n\n開啟NATvirtual box設定端口映射 3322 -&gt; 22\n使用host 的 cmd，找到VirtualBox Host-Only Network\n1234567891011ipconfig乙太網路卡 VirtualBox Host-Only Network:   連線特定 DNS 尾碼 . . . . . . . . :   連結-本機 IPv6 位址 . . . . . . . : fe80::ad6a:639d:7ae7:bbbb%7   IPv4 位址 . . . . . . . . . . . . : 192.168.56.1   子網路遮罩 . . . . . . . . . . . .: 255.255.255.0   預設閘道 . . . . . . . . . . . . .:   ssh -p 3322 nasa-intern@192.168.56.1\n我這裡使用termius進入\n\n\nSA4\n\n\n\n\n\n\n\n\nNASA{P4_Matryoshka_Files}\n這題有兩層壓縮檔，需要先安裝兩個解壓縮工具\n123456789sudo pacman -S unzipsudo pacman -S tarunzip airdrop.tar.gz.ziptar -xvf airdrop.tar.gzcd airdrop/p4cat flagNASA&#123;P4_Matryoshka_Files&#125;\n\nSA5\n\n\n\n\n\n\n\n\nNASA{P5_Th3_5PY_1s_Am0nG_U5}\n修改hostname與nasa-intern全名\n1234sudo suhostnamectl set-hostname totally-not-tuxusermod -c &quot;Definitely Legit Guy&quot; nasa-internexit\n\n1234cd airdrop/p5./securityMission accomplished! Here is your flag:NASA&#123;P5_Th3_5PY_1s_Am0nG_U5&#125;\nSA6\n\n\n\n\n\n\n\n\nNASA{P6_W3_4r3_fri3nd5_n0t_f00d}\n新增Group friends,把自己和 coolguy 加進這個 group\n12345sudo sugroupadd friendsuseradd -g friends coolguyusermod -G friends nasa-internexit\n執行 friendship-test 以獲得flag\n123cd airdrop/p6./friendship-testNASA&#123;P6_W3_4r3_fri3nd5_n0t_f00d&#125;\nSA7\n\n\n\n\n\n\n\n\nNASA{P7_I5_th1s_TH3_h0m3w0rk_f0ld3er?}\n12345678910111213141516171819202122232425262728293031cd airdropls -al[nasa-intern@totally-not-tux airdrop]$ ls -altotal 36drwxr-xr-x 9 nasa-intern nasa-intern 4096 Feb  1 00:05 .drwx------ 7 nasa-intern nasa-intern 4096 Feb 21 08:43 ..drwxr-xr-x 3 nasa-intern nasa-intern 4096 Jan  6 23:47 p10drwxr-xr-x 2 nasa-intern nasa-intern 4096 Jan  6 23:47 p11drwxr-xr-x 2 nasa-intern nasa-intern 4096 Jan  7 00:05 p4drwxr-xr-x 2 nasa-intern nasa-intern 4096 Jan  6 23:45 p5drwxr-xr-x 2 nasa-intern nasa-intern 4096 Jan  6 23:45 p6drwxr-xr-x 2 nasa-intern nasa-intern 4096 Jan  6 23:46 p7drwxr-xr-x 2 nasa-intern nasa-intern 4096 Jan  6 23:46 p9[nasa-intern@totally-not-tux airdrop]$ chown nasa-intern:friends p[nasa-intern@totally-not-tux airdrop]$ chmod 710 p7[nasa-intern@totally-not-tux airdrop]$ ls -altotal 36drwxr-xr-x 9 nasa-intern nasa-intern 4096 Feb  1 00:05 .drwx------ 7 nasa-intern nasa-intern 4096 Feb 21 08:43 ..drwxr-xr-x 3 nasa-intern nasa-intern 4096 Jan  6 23:47 p10drwxr-xr-x 2 nasa-intern nasa-intern 4096 Jan  6 23:47 p11drwxr-xr-x 2 nasa-intern nasa-intern 4096 Jan  7 00:05 p4drwxr-xr-x 2 nasa-intern nasa-intern 4096 Jan  6 23:45 p5drwxr-xr-x 2 nasa-intern nasa-intern 4096 Jan  6 23:45 p6drwx--x--- 2 nasa-intern friends     4096 Jan  6 23:46 p7drwxr-xr-x 2 nasa-intern nasa-intern 4096 Jan  6 23:46 p9cd p7./pentesterNASA&#123;P7_I5_th1s_TH3_h0m3w0rk_f0ld3er?&#125;\nSA8\n\n\n\n\n\n\n\n\nNASA&#123;P8_echo &quot;hello there!&quot; | cowsay -f dragon-and-cow&#125;NASA&#123;P8_echo &quot;My name is MSI RTX 4090&quot; | cowsay -f dragon-and-cow | lolcat&#125;\n查看 &#x2F;var&#x2F;log&#x2F;pacman.log，有甚麼東西被預先安裝了\n1cat /var/log/pacman.log\n\n找到奇怪的指令了\n12echo &quot;hello there!&quot; | cowsay -f dragon-and-cowecho &quot;My name is MSI RTX 4090&quot; | cowsay -f dragon-and-cow | lolcat\nSA9\n\n\n\n\n\n\n\n\nNASA{P9_I_Prefer_Arch}\n建立以下shell script(translate.sh)\n12345678910111213#!/bin/bashinput_file=&quot;book&quot;output_file=&quot;out.txt&quot;sed &quot;s/gentoo//g&quot; &quot;$input_file&quot; &gt; temp_file# 使用 sed 進行替換sed &#x27;y/aFS9PoUYXyQEvDfc7bVqW5hg)s18NeziB6xt0(RJjumM&#123;Zkw3d4CGnT&#125;rOLKH2lpAI /abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789()&#123;&#125; /&#x27; &quot;temp_file&quot; | tr -d &#x27; &#x27; &gt; &quot;$output_file&quot;# 刪除臨時文件rm temp_file\n給予權限\n123chmod +x translate.sh./translate.shcat out.txt\n內含有NASA{P9_I_Prefer_Arch}\nSA10\n\n\n\n\n\n\n\n\nNASA{P10_D0_Y0U_F1ND_DA_W43}\n12345[nasa-intern@totally-not-tux p10]$ find ./ -type f -name &quot;*NASA*&quot; -print./maze/J/F/O/5GY1&#123;3NASAJQTXXLGGTC5SHAM9N&#125;./maze/E/Q/B/29RZ&#123;C9XNARK2GP4A2AG5RHNASA&#125;./maze/W/A/E/NASA&#123;P10_D0_Y0U_F1ND_DA_W43&#125;[nasa-intern@totally-not-tux p10]$ \n\nSA11\n\n\n\n\n\n\n\n\nNASA{P11_1_d1d_y0u_g3t_th3_51gn4l?}NASA{P11_2_1_wi1l_b3_b4ck}NASA{P11_pkill -9 loop}ctrl+z將其掛到後台，fg掛回前台\n1234./loopctrl+zfgNASA&#123;P11_1_d1d_y0u_g3t_th3_51gn4l?&#125;\nctrl+z將其掛到後台，ps -h 尋找loop 的pidkill [pid]將回傳以下內容\n123456I&#x27;m not going to terminate that easily!But I will show some mercy and give you flag 2:NASA&#123;P11_2_1_wi1l_b3_b4ck&#125;You suspended me, but I&#x27;m back!But I will show some mercy and give you flag 1:NASA&#123;P11_1_d1d_y0u_g3t_th3_51gn4l?&#125;\n\nNASA{P11_pkill -9 loop}\nSA12本題無 Flag\n暫時性解法123456789101112$ command -v vimalias vim=&#x27;nano&#x27;$ aliasalias emacs=&#x27;nano&#x27;alias grep=&#x27;grep --color=auto&#x27;alias ls=&#x27;ls --color=auto&#x27;alias sudo=&#x27;sudo &#x27;alias vi=&#x27;nano&#x27;alias vim=&#x27;nano&#x27;unalias -a \n\n永久性解法(失敗)vim ~&#x2F;.bashrc註解掉This section is brought to you by the Nano Gang\n12345678910111213141516171819  GNU nano 7.2                       /home/nasa-intern/.bashrc                       Modified  ## ~/.bashrc## If not running interactively, don&#x27;t do anything[[ $- != *i* ]] &amp;&amp; returnalias ls=&#x27;ls --color=auto&#x27;alias grep=&#x27;grep --color=auto&#x27;PS1=&#x27;[\\u@\\h \\W]\\$ &#x27;# ===== section =====#alias vim=&#x27;nano&#x27;#alias vi=&#x27;nano&#x27;#alias emacs=&#x27;nano&#x27;#alias sudo=&#x27;sudo &#x27;# ===========================================================\n重新開機 會發現每分鐘都會檢查，如果.bashrc被修該就會輸出一下訊息，並自動修改.bashrc\n真，永久性解法每分鐘檢查的程式，我懷疑藏在&#x2F;etc&#x2F;cron.d&#x2F;minute\n12345678sudo su # cat /etc/cron.d/minute# Run the hourly jobsSHELL=/bin/bashPATH=/sbin:/bin:/usr/sbin:/usr/binMAILTO=root*/1 * * * * root /usr/src/nano_gang/check.sh\n將 *&#x2F;1 * * * * root &#x2F;usr&#x2F;src&#x2F;nano_gang&#x2F;check.sh註解掉\n12345# Run the hourly jobsSHELL=/bin/bashPATH=/sbin:/bin:/usr/sbin:/usr/binMAILTO=root# */1 * * * * root /usr/src/nano_gang/check.sh\nreboot 重新開機把 .bashrc 的 alias 改掉\n成功!\n另外安裝 emacs\n1sudo pacman -S emacs","slug":"NASA-01","date":"2024-02-18T16:00:00.000Z","categories_index":"","tags_index":"NASA","author_index":"G36maid"}]